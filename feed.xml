<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://bibekanandadatta.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://bibekanandadatta.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-07-22T00:35:05+00:00</updated><id>https://bibekanandadatta.com/feed.xml</id><title type="html">blank</title><subtitle>mechanician, travel, food, and tech enthusiast</subtitle><entry><title type="html">Using LAPACK libraries with Intel Fortran and Abaqus user subroutines</title><link href="https://bibekanandadatta.com/blog/2024/lapack-Intel-Fortran-Abaqus/" rel="alternate" type="text/html" title="Using LAPACK libraries with Intel Fortran and Abaqus user subroutines"/><published>2024-05-09T12:00:00+00:00</published><updated>2024-05-09T12:00:00+00:00</updated><id>https://bibekanandadatta.com/blog/2024/lapack-Intel-Fortran-Abaqus</id><content type="html" xml:base="https://bibekanandadatta.com/blog/2024/lapack-Intel-Fortran-Abaqus/"><![CDATA[<h2 id="what-is-linear-algebra-package-lapack">What is Linear Algebra PACKage (LAPACK)</h2> <p>Linear Algebra PACKage (LAPACK) is a Fortran-based efficient library for linear algebraic operations shared under a 3-Clause BSD License. Original LAPACK was written in FORTRAN 77 but later moved to Fortran 90. Many programming languages and their packages have interfaces or wrappers for the original LAPACK library. The original LAPACK is hosted on <a href="https://www.netlib.org/lapack/">Netlib</a>, but many software companies have their own implementations of LAPACK such as Intel has its own version of LAPACK included in the Math Kernel Library (MKL) as a part of the Intel oneAPI package and Apple has its LAPACK library within the Accelerate framework. There are also simplified Fortran 95 interface libraries to the original LAPACK however it is not standardized and interfaces vary among different implementations. With LAPACK, you do not need to write standard linear algebraic procedures. Check the <a href="https://www.netlib.org/lapack/explore-html/">LAPACK documentation on Netlib</a> to see what type of subroutines are available in LAPACK. The primary objective of this blog is to test the LAPACK library from Intel MKL with Abaqus user subroutines.</p> <h2 id="installing-visual-studio-and-intel-oneapi">Installing Visual Studio and Intel oneAPI</h2> <p>To use LAPACK subroutines from the Intel MKL in your Fortran codes, first, you need to have Microsoft Visual Studio and Intel oneAPI Toolkits (Base and HPC) installed.</p> <p>The community edition of Microsoft Visual Studio is free and the Intel oneAPI has been free for the last few years.</p> <ul> <li>Make sure to install compatible versions of Microsoft Visual Studio and Intel oneAPI packages. Use Google to find information about compatible versions. Hyperlinks to the Intel website for the developers’ guide never work.</li> <li>Install Visual Studio first. The installation procedure is simple, and stick to the default option, but make sure to select the <strong>Desktop development with C++</strong> option during installation.</li> <li>Now proceed to Install oneAPI packages; first the Base Toolkit and then the HPC Toolkit. Stick to the default installation procedure. Intel oneAPI packages should be installed in the <code class="language-plaintext highlighter-rouge">C:\Program Files (x86)\Intel\oneAPI</code> directory.</li> </ul> <p>Once the installation is complete, you can access <strong>Intel oneAPI Command Prompt</strong> from the Program Menu on Windows.</p> <h2 id="compiling-and-linking-lapack-subroutines-from-the-command-line">Compiling and linking LAPACK subroutines from the command line</h2> <p>Save the following Fortran program as <code class="language-plaintext highlighter-rouge">mkl_test.f90</code> in your working directory. This code is seemingly simple; it calls two subroutines <code class="language-plaintext highlighter-rouge">lapack_test()</code> and <code class="language-plaintext highlighter-rouge">lapack95_test()</code> from the main program which solves for a simple 3x3 linear system using the <code class="language-plaintext highlighter-rouge">dgesv</code> subroutine from <code class="language-plaintext highlighter-rouge">LAPACK</code> and the <code class="language-plaintext highlighter-rouge">gesv</code> interface from Intel MKL’s <code class="language-plaintext highlighter-rouge">LAPACK95</code> library. In both cases, it prints the results on the screen.</p> <details><summary>Click here to see the Fortran code</summary> <div class="language-fortran highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">program</span><span class="w"> </span><span class="n">main</span><span class="w">

  </span><span class="k">call</span><span class="w"> </span><span class="n">lapack_test</span><span class="p">()</span><span class="w">

  </span><span class="k">call</span><span class="w"> </span><span class="n">lapack95_test</span><span class="p">()</span><span class="w">

</span><span class="k">end</span><span class="w"> </span><span class="k">program</span><span class="w"> </span><span class="n">main</span><span class="w">


</span><span class="k">subroutine</span><span class="w"> </span><span class="n">lapack_test</span><span class="p">()</span><span class="w">
</span><span class="c1">! subroutine for testing original lapack routine</span><span class="w">

  </span><span class="k">implicit</span><span class="w"> </span><span class="k">none</span><span class="w">

  </span><span class="kt">integer</span><span class="p">,</span><span class="w"> </span><span class="k">parameter</span><span class="w">  </span><span class="p">::</span><span class="w"> </span><span class="n">wp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">selected_real_kind</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">307</span><span class="p">)</span><span class="w">
  </span><span class="kt">integer</span><span class="p">,</span><span class="w"> </span><span class="k">parameter</span><span class="w">  </span><span class="p">::</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="w">
  </span><span class="kt">real</span><span class="p">(</span><span class="n">wp</span><span class="p">)</span><span class="w">            </span><span class="p">::</span><span class="w"> </span><span class="n">A</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">b</span><span class="p">(</span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">x</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w">

  </span><span class="c1">! required for original lapack</span><span class="w">
  </span><span class="kt">integer</span><span class="p">,</span><span class="w"> </span><span class="k">parameter</span><span class="w">  </span><span class="p">::</span><span class="w"> </span><span class="n">nrhs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w">
  </span><span class="kt">integer</span><span class="w">             </span><span class="p">::</span><span class="w"> </span><span class="n">lda</span><span class="p">,</span><span class="w"> </span><span class="n">ipiv</span><span class="p">(</span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">ldb</span><span class="p">,</span><span class="w"> </span><span class="n">info</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w">

  </span><span class="k">do</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w">
    </span><span class="n">A</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">:</span><span class="n">i</span><span class="mi">-1</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">-1.0_wp</span><span class="w">
    </span><span class="n">A</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="mi">+1</span><span class="p">:</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">-1.0_wp</span><span class="w">
    </span><span class="n">A</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">5.0_wp</span><span class="w">
    </span><span class="n">b</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">do</span><span class="w">

  </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="w">
  </span><span class="n">lda</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">size</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="w">   </span><span class="c1">! row count of A</span><span class="w">
  </span><span class="n">ldb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">size</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="w">     </span><span class="c1">! row count of b</span><span class="w">

  </span><span class="c1">! A returns as A = P*L*U factorization, x is the solution</span><span class="w">
  </span><span class="k">call</span><span class="w"> </span><span class="n">dgesv</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">nrhs</span><span class="p">,</span><span class="w"> </span><span class="n">A</span><span class="p">,</span><span class="w"> </span><span class="n">lda</span><span class="p">,</span><span class="w"> </span><span class="n">ipiv</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">ldb</span><span class="p">,</span><span class="w"> </span><span class="n">info</span><span class="p">)</span><span class="w">
  </span><span class="k">print</span><span class="w"> </span><span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="s1">'results from original lapack subroutine: '</span><span class="w">
  </span><span class="k">print</span><span class="w"> </span><span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w">

</span><span class="k">end</span><span class="w"> </span><span class="k">subroutine</span><span class="w"> </span><span class="n">lapack_test</span><span class="w">

</span><span class="k">subroutine</span><span class="w"> </span><span class="n">lapack95_test</span><span class="p">()</span><span class="w">
</span><span class="c1">! subroutine to test lapack95 routine</span><span class="w">

  </span><span class="k">use</span><span class="w"> </span><span class="n">lapack95</span><span class="p">,</span><span class="w"> </span><span class="k">only</span><span class="p">:</span><span class="w"> </span><span class="n">gesv</span><span class="w">

  </span><span class="k">implicit</span><span class="w"> </span><span class="k">none</span><span class="w">

  </span><span class="kt">integer</span><span class="p">,</span><span class="w"> </span><span class="k">parameter</span><span class="w">  </span><span class="p">::</span><span class="w"> </span><span class="n">wp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">selected_real_kind</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">307</span><span class="p">)</span><span class="w">
  </span><span class="kt">integer</span><span class="p">,</span><span class="w"> </span><span class="k">parameter</span><span class="w">  </span><span class="p">::</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="w">
  </span><span class="kt">real</span><span class="p">(</span><span class="n">wp</span><span class="p">)</span><span class="w">            </span><span class="p">::</span><span class="w"> </span><span class="n">A</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">b</span><span class="p">(</span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">x</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w">
  </span><span class="kt">integer</span><span class="w">             </span><span class="p">::</span><span class="w"> </span><span class="n">i</span><span class="w">

  </span><span class="c1">! rebuilding A and b since it was changed</span><span class="w">
  </span><span class="k">do</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w">
    </span><span class="n">A</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">:</span><span class="n">i</span><span class="mi">-1</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">-1.0_wp</span><span class="w">
    </span><span class="n">A</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="mi">+1</span><span class="p">:</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">-1.0_wp</span><span class="w">
    </span><span class="n">A</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">5.0_wp</span><span class="w">
    </span><span class="n">b</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="w">
  </span><span class="k">end</span><span class="w"> </span><span class="k">do</span><span class="w">

  </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="w">
  </span><span class="c1">! A returns as A=P*L*U factorization, x is the solution</span><span class="w">
  </span><span class="k">call</span><span class="w"> </span><span class="n">gesv</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">x</span><span class="p">)</span><span class="w">    
  </span><span class="k">print</span><span class="w"> </span><span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="s1">'results from lapack95 module: '</span><span class="w">
  </span><span class="k">print</span><span class="w"> </span><span class="o">*</span><span class="p">,</span><span class="n">x</span><span class="w">

</span><span class="k">end</span><span class="w"> </span><span class="k">subroutine</span><span class="w"> </span><span class="n">lapack95_test</span><span class="w">
</span></code></pre></div></div> </details> <p>If you are already familiar with the Microsoft Visual Studio environment, you can create a project there and compile and link the code to Intel MKL libraries to create the executables. You can find other tutorials or blogs to learn how to do that. Here we will use the command line option to compile and link the code to generate the executable. Open the <strong>Intel one API Command Prompt for Intel 64 for Visual Studio 2019</strong> terminal from the Windows program menu. A simple Fortran program (without MKL library or external library) can be compiled and linked using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ifort <span class="nt">-o</span> <span class="nb">test </span>test.f90
</code></pre></div></div> <p>Now to compile and link a Fortran code that includes MKL components, we need to add the <code class="language-plaintext highlighter-rouge">/Qmkl</code> flag before the <code class="language-plaintext highlighter-rouge">-o</code>. Since the code also uses the LAPACK95 module from Intel MKL, we need to add <code class="language-plaintext highlighter-rouge">mkl_lapack95_ilp64.lib</code> for further linking.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ifort /Qmkl <span class="nt">-o</span> mkl_test mkl_test.f90 mkl_lapack95_ilp64.lib
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">ifort</code> is the Intel Fortran compiler, the <code class="language-plaintext highlighter-rouge">/Qmkl</code> option tells the compiler to link standard <code class="language-plaintext highlighter-rouge">.lib</code> files related to MKL (it’s a shortcut), and <code class="language-plaintext highlighter-rouge">-o</code> specifies the object file. The last option <code class="language-plaintext highlighter-rouge">mkl_lapack95_ilp64.lib</code> is to link the LAPACK95 interface library to the object file (this is not a part of the core MKL).</p> <p>This will generate the <code class="language-plaintext highlighter-rouge">mkl_test.exe</code> executable and <code class="language-plaintext highlighter-rouge">mkl_test.obj</code> object file in the working directory. You can then run the code from any Windows terminal using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./mkl_test
</code></pre></div></div> <p>This will now execute and print out results from two different subroutines used in the code. Now LAPACK95 interfaces may appeal to you more than the original LAPACK subroutines because of the simplicity. But there is a caveat, LAPACK95 implementations are not as universal as the original LAPACK. LAPACK95 interfaces included in the Intel MKL and provided by Netlib are different. To avoid compatibility issues, it is probably better to use the keywords when calling a LAPACK95 subroutine.</p> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>If you are using a Linux or Unix-based operating system (macOS), you can follow <a href="https://fortran-lang.org/learn/building_programs/managing_libraries/">this simple tutorial on fortran-lang.org</a> to learn how to compile source codes and link libraries.</p> </blockquote> <h2 id="using-lapack-libraries-with-abaqus-user-subroutines">Using LAPACK libraries with Abaqus user subroutines</h2> <p>If you are looking to use LAPACK with Abaqus user subroutines, I am assuming, you already have configured Abaqus to compile and link user subroutines. If you have not done it yet, <a href="https://www.bibekanandadatta.com/blog/2021/link-intel-and-vs-abaqus-2020/">follow the steps described in a previous blog post</a>. At the end of the post, it is shown how to configure the Abaqus environment file to use the MKL library.</p> <blockquote> <p>You need to have <strong>admin</strong> access to make changes described in that blog post. If you are working on a shared computer cluster, ask the <strong>system administrator</strong> to make changes for you.</p> </blockquote> <p>In case you are unable to make changes to the environment file in the installation directory for compatibility reasons, you can add a <code class="language-plaintext highlighter-rouge">abaqus_v6.env</code> file to your home directory or the project’s working directory with customized compiling options as shown below for Windows.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># job-specific abaqus_v6 environment file (Windows)</span>
<span class="c"># this should be located in the working directory</span>

compile_fortran +<span class="o">=</span> <span class="o">[</span><span class="s1">'/Qmkl:sequential'</span><span class="o">]</span>
</code></pre></div></div> <p>If you are using Abaqus with Intel Fortran compiler on Linux, the compiler option needs to be <code class="language-plaintext highlighter-rouge">-mkl=sequential</code>. This command will extend the default compiler options provided by Abaqus and let you compile user subroutines that uses functions and routines from the Intel oneMKL library.</p> <blockquote class="block-tip"> <h5 id="tip-1">TIP</h5> <p>It is possible to add <code class="language-plaintext highlighter-rouge">compile_fortran += ['/free']</code> (Windows) or <code class="language-plaintext highlighter-rouge">compile_fortran += ['-free']</code> (Linux) to the <code class="language-plaintext highlighter-rouge">abaqus_v6.env</code> file to execute free form Fortran codes as Abaqus subroutine. You will also need to change the Abaqus-provided fixed-form subroutine interface to a free-form one. Multiple compile options can be added to this way by seperating each option by a comma (,). If your subroutine requires additional compiling or linking options, it is perhaps better to share the customized <code class="language-plaintext highlighter-rouge">abaqus_v6.env</code> file with other users to execute the code.</p> </blockquote> <h3 id="writing-and-testing-abaqus-user-subroutine-with-lapack">Writing and testing Abaqus user subroutine with LAPACK</h3> <p>Now we will include the <code class="language-plaintext highlighter-rouge">lapack_test()</code> subroutine to the Abaqus <code class="language-plaintext highlighter-rouge">UEL</code> subroutine interface. For the simple (and dummy) model we built, Abaqus will call the <code class="language-plaintext highlighter-rouge">UEL</code> subroutine for that. Within the <code class="language-plaintext highlighter-rouge">UEL</code> subroutine, we call the <code class="language-plaintext highlighter-rouge">lapack_test()</code> followed by calling the <code class="language-plaintext highlighter-rouge">xit</code> function from Abaqus to terminate the program. Copy and save the following code as <code class="language-plaintext highlighter-rouge">uel_mkl.for</code> in your working directory. For simplicity, we will use the fixed-form UEL interface provided by Abaqus in its documentation.</p> <details><summary>Click here to see the Abaqus UEL subroutine code</summary> <div class="language-fortran highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">      </span><span class="k">SUBROUTINE</span><span class="w"> </span><span class="n">UEL</span><span class="p">(</span><span class="n">RHS</span><span class="p">,</span><span class="n">AMATRX</span><span class="p">,</span><span class="n">SVARS</span><span class="p">,</span><span class="n">ENERGY</span><span class="p">,</span><span class="n">NDOFEL</span><span class="p">,</span><span class="n">NRHS</span><span class="p">,</span><span class="n">NSVARS</span><span class="p">,</span><span class="w">
     </span><span class="mi">1</span><span class="w"> </span><span class="n">PROPS</span><span class="p">,</span><span class="n">NPROPS</span><span class="p">,</span><span class="n">COORDS</span><span class="p">,</span><span class="n">MCRD</span><span class="p">,</span><span class="n">NNODE</span><span class="p">,</span><span class="n">U</span><span class="p">,</span><span class="n">DU</span><span class="p">,</span><span class="n">V</span><span class="p">,</span><span class="n">A</span><span class="p">,</span><span class="n">JTYPE</span><span class="p">,</span><span class="n">TIME</span><span class="p">,</span><span class="n">DTIME</span><span class="p">,</span><span class="w">
     </span><span class="mi">2</span><span class="w"> </span><span class="n">KSTEP</span><span class="p">,</span><span class="n">KINC</span><span class="p">,</span><span class="n">JELEM</span><span class="p">,</span><span class="n">PARAMS</span><span class="p">,</span><span class="n">NDLOAD</span><span class="p">,</span><span class="n">JDLTYP</span><span class="p">,</span><span class="n">ADLMAG</span><span class="p">,</span><span class="n">PREDEF</span><span class="p">,</span><span class="n">NPREDF</span><span class="p">,</span><span class="w">
     </span><span class="mi">3</span><span class="w"> </span><span class="n">LFLAGS</span><span class="p">,</span><span class="n">MLVARX</span><span class="p">,</span><span class="n">DDLMAG</span><span class="p">,</span><span class="n">MDLOAD</span><span class="p">,</span><span class="n">PNEWDT</span><span class="p">,</span><span class="n">JPROPS</span><span class="p">,</span><span class="n">NJPROP</span><span class="p">,</span><span class="n">PERIOD</span><span class="p">)</span><span class="w">

      </span><span class="k">INCLUDE</span><span class="w"> </span><span class="s1">'ABA_PARAM.INC'</span><span class="w">

      </span><span class="k">DIMENSION</span><span class="w"> </span><span class="n">RHS</span><span class="p">(</span><span class="n">MLVARX</span><span class="p">,</span><span class="o">*</span><span class="p">),</span><span class="n">AMATRX</span><span class="p">(</span><span class="n">NDOFEL</span><span class="p">,</span><span class="n">NDOFEL</span><span class="p">),</span><span class="n">PROPS</span><span class="p">(</span><span class="o">*</span><span class="p">),</span><span class="w">
     </span><span class="mi">1</span><span class="w"> </span><span class="n">SVARS</span><span class="p">(</span><span class="o">*</span><span class="p">),</span><span class="n">ENERGY</span><span class="p">(</span><span class="mi">8</span><span class="p">),</span><span class="n">COORDS</span><span class="p">(</span><span class="n">MCRD</span><span class="p">,</span><span class="n">NNODE</span><span class="p">),</span><span class="n">U</span><span class="p">(</span><span class="n">NDOFEL</span><span class="p">),</span><span class="w">
     </span><span class="mi">2</span><span class="w"> </span><span class="n">DU</span><span class="p">(</span><span class="n">MLVARX</span><span class="p">,</span><span class="o">*</span><span class="p">),</span><span class="n">V</span><span class="p">(</span><span class="n">NDOFEL</span><span class="p">),</span><span class="n">A</span><span class="p">(</span><span class="n">NDOFEL</span><span class="p">),</span><span class="n">TIME</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span><span class="n">PARAMS</span><span class="p">(</span><span class="o">*</span><span class="p">),</span><span class="w">
     </span><span class="mi">3</span><span class="w"> </span><span class="n">JDLTYP</span><span class="p">(</span><span class="n">MDLOAD</span><span class="p">,</span><span class="o">*</span><span class="p">),</span><span class="n">ADLMAG</span><span class="p">(</span><span class="n">MDLOAD</span><span class="p">,</span><span class="o">*</span><span class="p">),</span><span class="n">DDLMAG</span><span class="p">(</span><span class="n">MDLOAD</span><span class="p">,</span><span class="o">*</span><span class="p">),</span><span class="w">
     </span><span class="mi">4</span><span class="w"> </span><span class="n">PREDEF</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">NPREDF</span><span class="p">,</span><span class="n">NNODE</span><span class="p">),</span><span class="n">LFLAGS</span><span class="p">(</span><span class="o">*</span><span class="p">),</span><span class="n">JPROPS</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w">

      
        </span><span class="k">call</span><span class="w"> </span><span class="n">lapack_test</span><span class="p">()</span><span class="w">

        </span><span class="k">call</span><span class="w"> </span><span class="n">xit</span><span class="w">

      </span><span class="k">END</span><span class="w"> </span><span class="k">SUBROUTINE</span><span class="w"> </span><span class="n">UEL</span><span class="w">


      </span><span class="k">subroutine</span><span class="w"> </span><span class="n">lapack_test</span><span class="p">()</span><span class="w">
      
        </span><span class="k">implicit</span><span class="w"> </span><span class="k">none</span><span class="w">

        </span><span class="kt">integer</span><span class="p">,</span><span class="w"> </span><span class="k">parameter</span><span class="w">  </span><span class="p">::</span><span class="w"> </span><span class="n">wp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">selected_real_kind</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">307</span><span class="p">)</span><span class="w">
        </span><span class="kt">integer</span><span class="p">,</span><span class="w"> </span><span class="k">parameter</span><span class="w">  </span><span class="p">::</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="w">
        </span><span class="kt">real</span><span class="p">(</span><span class="n">wp</span><span class="p">)</span><span class="w">            </span><span class="p">::</span><span class="w"> </span><span class="n">A</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">b</span><span class="p">(</span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">x</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w">

        </span><span class="kt">integer</span><span class="p">,</span><span class="w"> </span><span class="k">parameter</span><span class="w">  </span><span class="p">::</span><span class="w"> </span><span class="n">nrhs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w">
        </span><span class="kt">integer</span><span class="w">             </span><span class="p">::</span><span class="w"> </span><span class="n">lda</span><span class="p">,</span><span class="w"> </span><span class="n">ipiv</span><span class="p">(</span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">ldb</span><span class="p">,</span><span class="w"> </span><span class="n">info</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w">

        </span><span class="k">do</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w">
          </span><span class="n">A</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">:</span><span class="n">i</span><span class="mi">-1</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">-1.0_wp</span><span class="w">
          </span><span class="n">A</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="mi">+1</span><span class="p">:</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">-1.0_wp</span><span class="w">
          </span><span class="n">A</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">5.0_wp</span><span class="w">
          </span><span class="n">b</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="w">
        </span><span class="k">end</span><span class="w"> </span><span class="k">do</span><span class="w">

        </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="w">
        </span><span class="n">lda</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">size</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="w">   </span><span class="c1">! row count of A</span><span class="w">
        </span><span class="n">ldb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">size</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="w">     </span><span class="c1">! row count of b</span><span class="w">

        </span><span class="c1">! A returns as LU factorization, x is the solution</span><span class="w">
        </span><span class="k">call</span><span class="w"> </span><span class="n">dgesv</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">nrhs</span><span class="p">,</span><span class="w"> </span><span class="n">A</span><span class="p">,</span><span class="w"> </span><span class="n">lda</span><span class="p">,</span><span class="w"> </span><span class="n">ipiv</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">ldb</span><span class="p">,</span><span class="w"> </span><span class="n">info</span><span class="p">)</span><span class="w">
        </span><span class="k">print</span><span class="w"> </span><span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="s1">'results from original lapack subroutine: '</span><span class="w">
        </span><span class="k">print</span><span class="w"> </span><span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="w">

      </span><span class="k">end</span><span class="w"> </span><span class="k">subroutine</span><span class="w"> </span><span class="n">lapack_test</span><span class="w">
</span></code></pre></div></div> </details> <h3 id="executing-user-subroutine-with-a-dummy-abaqus-model">Executing user subroutine with a dummy Abaqus model</h3> <p>Since we chose to test the LAPACK subroutine inside the Abaqus UEL subroutine, we need to build an Abaqus model with a user element. Remember, our Abaqus subroutine does not do anything but perform a simple linear algebra calculation. So we do not need a real Abaqus model, rather we need something minimalistic that can help us to execute the subroutine. Following is a simple example of a user element, where I defined a single 4-node quadrilateral element with one property and static step. We did not apply any boundary or loading condition to this. Copy the following input file and save it as <code class="language-plaintext highlighter-rouge">test.inp</code> in the working directory.</p> <details><summary>Click here to see the Abaqus input file</summary> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*User element, type=U1, nodes=4, coordinates=2, properties=1, iproperties=0
1, 2
*Node
1, 0., 0.
2, 1., 0.
3, 0., 1.
4, 1., 1.
*Element, type=U1, elset=all
1, 1, 2, 4, 3
*Uel property, elset=all
1.0
*Step, name=test
*Static
1., 1., 1.E-3, 1.
*End step
</code></pre></div></div> </details> <p>Abaqus UEL subroutine needs to be executed from the command line. From the <strong>PowerShell</strong> terminal, <strong>Windows Command Prompt</strong>, or <strong>Abaqus Command</strong> terminal, you can execute the subroutine with the sample input file using the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>abaqus interactive <span class="nv">job</span><span class="o">=</span><span class="nb">test </span><span class="nv">user</span><span class="o">=</span>uel_mkl.for
</code></pre></div></div> <p>This will compile and link the user subroutine to the Abaqus executable and run it from the command line. As we already discussed, this is not a real Abaqus model or user subroutine code, we are not hoping to get any real finite element result. Executing this subroutine will just print out the same output as before on the terminal before exiting Abaqus with an error (remember, we used <code class="language-plaintext highlighter-rouge">xit</code> function for termination).</p> <h2 id="fortran-and-lapack-resources">Fortran and LAPACK resources</h2> <p>Since Fortran has been revised multiple times to include new features, it may make you a bit confused when you look at the legacy code vs how Fortran codes are written today. It is good to know the features from the older Fortran standard and modern Fortran standard and follow a consistent style in developing subroutines. Some resources that may help in that regard are:</p> <ul> <li><a href="https://fortran-lang.org">Fortran users community website (fortran-lang.org)</a></li> <li><a href="https://fortranwiki.org/fortran/show/HomePage">Fortran Wiki</a></li> <li><a href="https://www.fortran90.org/src/best-practices.html">Best practices from Fortran90.org</a></li> <li><a href="http://annefou.github.io/Fortran/">Modern Fortran materials by Anne Fouilloux</a></li> <li><a href="https://bristolcompositesinstitute.github.io/RSE-Guide/abaqus-user-subroutines/index.html">Best practices for writing Abaqus user subroutine</a></li> </ul> <p>Using LAPACK is not as intuitive or straightforward as using MATLAB or NumPy. Look into the documentation carefully and you can use the following to find what LAPACK subroutines to use and how to use them for specific tasks.</p> <ul> <li><a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl-function-finding-advisor.html">LAPACK Function Finding Advisor for Intel oneMKL</a></li> <li><a href="https://github.com/numericalalgorithmsgroup/LAPACK_examples">LAPACK examples by NAG library</a></li> <li><a href="https://sites.science.oregonstate.edu/~landaur/nacphy/lapack/index.html">LAPACK resources from Oregon State University</a></li> </ul> <p>Intel also has LAPACK implementation examples from oneMKL avaiable online, but I am afraid to share the hyperlinks as they often change. It is better to search online when needed. Additionally, the same examples can be found in one of the Intel oneAPI installation subdirectories.</p> <h2 id="bonus-item-adding-intel-oneapi-command-prompt-to-powershell-and-windows-terminal">Bonus item: Adding Intel oneAPI Command Prompt to PowerShell and Windows Terminal</h2> <p>You can not run the Intel oneAPI command line from the PowerShell terminal directly, but you can run it from the original Windows Command Prompt terminal. However, Command Prompt, even the default old PowerShell (PowerShell 5) does not have the latest features such as auto-completion. If you have not used the new PowerShell, it’s highly recommended on Windows. Download and install the <a href="https://github.com/PowerShell/PowerShell">latest version of PowerShell 7 from here</a>. The new PowerShell executable is named as <code class="language-plaintext highlighter-rouge">pwsh.exe</code>.</p> <p><a href="https://learn.microsoft.com/en-us/windows/terminal/">Windows Terminal App</a> is great at managing different Shell profiles. Terminal does not have to be boring; you can customize your terminal experience a lot using this app. Download and install the <a href="https://github.com/microsoft/terminal">Windows Terminal app from here</a>. Once installed, you can manage different Shell profiles there (Cmd, PowerShell, pwsh, WSL, etc.). To add the Intel oneAPI profile there,</p> <ul> <li> <p>Open the app, and from the dropdown menu on the top bar, click on <strong>Settings</strong>.</p> </li> <li> <p>Now scroll down along the left-side menu bar, click <strong>Add a new Profile</strong>, and select the option <strong>Empty New Profil</strong>. Name the new profile as <strong>Intel oneAPI</strong> and add the following following to the <strong>Command Line</strong> option.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmd.exe /k <span class="s2">""</span>C:<span class="se">\P</span>rogram Files <span class="o">(</span>x86<span class="o">)</span><span class="se">\I</span>ntel<span class="se">\o</span>neAPI<span class="se">\s</span>etvars.bat<span class="s2">" intel64 vs2019"</span> <span class="o">&amp;&amp;</span> pwsh
</code></pre></div> </div> <p>Make sure you have the correct version of Visual Studio instead of <code class="language-plaintext highlighter-rouge">vs2019</code>. Other options to set the new profile are trivial. Now you can save the profile. When you start the profile from the Terminal app, this will execute the Windows command prompt first, then it will set the environment variables for Intel oneAPI and Visual Studio, and then run the new PowerShell 7 (<code class="language-plaintext highlighter-rouge">pwsh.exe</code>). You can now compile and build programs using Intel Fortran in a modern terminal environment.</p> </li> </ul>]]></content><author><name></name></author><category term="tutorial"/><category term="Intel-MKL"/><category term="Intel-oneAPI"/><category term="Abaqus"/><category term="user-subroutines"/><category term="Fortran"/><category term="programming"/><category term="Visual-Studio"/><category term="LAPACK"/><category term="Finite-element"/><summary type="html"><![CDATA[A simple tutorial to compile and link LAPACK libraries with Intel Fortran compiler]]></summary></entry><entry><title type="html">Licensing and citing academic software and tutorials</title><link href="https://bibekanandadatta.com/blog/2024/licensing-and-citing-online/" rel="alternate" type="text/html" title="Licensing and citing academic software and tutorials"/><published>2024-05-02T13:00:00+00:00</published><updated>2024-05-02T13:00:00+00:00</updated><id>https://bibekanandadatta.com/blog/2024/licensing-and-citing-online</id><content type="html" xml:base="https://bibekanandadatta.com/blog/2024/licensing-and-citing-online/"><![CDATA[<p>GitHub is amazing when it comes to hosting code repositories with the <code class="language-plaintext highlighter-rouge">Git</code> version control system. As of early 2024, almost everyone, ranging from commercial entities to academic researchers, is sharing their works on GitHub. This has benefited me greatly in terms of learning. However, recently I ran into a rather unconventional issue that I did not know much about previously. I published two different source codes with documentation as educational resources which I wanted to be available for free for learning purposes without violating academic integrity. The viable way to ensure this is to share the contents in a public repository with appropriate licensing and make it citable by others.</p> <h2 id="licensing">Licensing</h2> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is not legal advice; rather it is just my experience of finding out and sharing resources related to licensing academic content.</p> </blockquote> <p>License is considered as a contract between the copyright holder and the public which both parties need to follow. Some licenses are very permissible and compatible with other licenses and some others are more restrictive and incompatible with many common licenses. You should read the licensing deed/ agreement thoroughly and consult with the appropriate personnel before applying any license to your work. At the same time, when you are using someone else’s code or program, you should read and understand what freedom the copyright holder provides you as a user. <a href="https://www.nafems.org/blog/posts/analysis-origins-msc-and-nastran/">This blog post on the origin of MSC.Nastran software</a> has a section on their legal troubles with NASA. This should motivate you to look more closely into the licensing.</p> <h3 id="some-resources-on-getting-started-with-licensing">Some resources on getting started with licensing</h3> <p>GitHub created a simple website <a href="https://choosealicense.com">https://choosealicense.com</a> to help its (new) users educate about different licenses. This website is a good starting point if you have a small project, but it does not have enough details for many common licenses that are used frequently by many others. GNU also has a dedicated webpage listing different licenses with their opinions (<a href="https://www.gnu.org/licenses/license-list.html">https://www.gnu.org/licenses/license-list.html</a>). Two other somewhat similar web pages are by Free Software Foundation (<a href="https://www.fsf.org/licensing/">https://www.fsf.org/licensing/</a>) and Open Source Initiative (<a href="https://opensource.org/licenses">https://opensource.org/licenses</a>). If you are not very well-versed with the jargon and lingos used in these licenses, then <a href="https://www.tldrlegal.com">https://www.tldrlegal.com</a> got you covered with quick overviews of common licenses.</p> <h3 id="shared-experiences-by-other-academics">Shared experiences by other academics</h3> <p>If you are a new developer who is primarily developing scientific software for research purposes, you may be unaware of such complexities and confused after reading the first paragraph. I would like to ensure that you are not alone. Others have been in our shoes before; here are a few blog posts written by some professors in the past decade on this issue. These blogs are well-written with more concrete examples and first-hand experiences.</p> <ul> <li>Jake VanderPlas’s blog: <a href="https://www.astrobetter.com/blog/2014/03/10/the-whys-and-hows-of-licensing-scientific-code/">https://www.astrobetter.com/blog/2014/03/10/the-whys-and-hows-of-licensing-scientific-code/</a>.</li> <li>Prof. C. Titus Brown’s blog: <a href="http://ivory.idyll.org/blog/2015-on-licensing-in-bioinformatics.html">http://ivory.idyll.org/blog/2015-on-licensing-in-bioinformatics.html</a>.</li> <li>Prof. Lior S. Patcher’s blog: <a href="https://liorpachter.wordpress.com/2017/08/03/i-was-wrong-part-2/">https://liorpachter.wordpress.com/2017/08/03/i-was-wrong-part-2/</a>.</li> </ul> <p>After reading those blogs you probably realized that there is no general consensus among academics and software developers on licensing; everyone has different philosophies and preferences. Some prefer MIT or BSD-like permissive licenses which will allow the users to do whatever they want, and some prefer GNU GPL-like copyleft licenses which implicitly pose some restriction on how the source code and software needs to be distributed.</p> <h3 id="my-viewpoint">My viewpoint</h3> <p>I think, choosing a license primarily depends on your philosophy of how would you want to make your project available and adopted by others. It is best to sit down and think about the broader objectives of the project that you want to share. Some of the questions you should ask yourself are:</p> <ul> <li>What are the broad objectives of your work?</li> <li>Do you have any restrictions on how the code is to be shared by the funding agency?</li> <li>Do you want other people to use your work without any modification? Or do you want other people to adopt and extend your work for their applications?</li> <li>Do you care about being properly credited for the work if someone adopts the work and uses it in their project?</li> <li>Are you okay with someone else developing proprietary (or commercial) products based on your work while you may or may not be paid for it?</li> </ul> <p>Based on the answers to these questions, you can choose a permissive license, a copyleft license, a dual-license, or something else.</p> <p>I asked these questions to myself and my answers were I consider the work I mentioned in the beginning to be an educational resource that includes a source code and some test cases demonstrating an application specific to a framework. I would like others to learn from this and build on top of this. However, I do not want any student to copy-paste the work and pass it on as their own for academic/ research work and someone to distribute it for any monetary gain. Based on those, I decided to relicense my work under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> which is somewhat commonly used for educational resources (e.g., MIT Open Courseware). However, I should mention that the Creative Commons licenses are not suitable for software. But my repository was less of software and more of a tutorial that has source code to demonstrate the tutorial. While it was possible to license the software and the code under different agreements, it seemed a bit more complicated for me at that time, but I may chose to do it in future.</p> <blockquote> <p>A fun fact is when a <em>non-commercial</em> clause is added to any license, it can no longer be considered as open-source by definition. You can use other terms such as <em>source-available</em> for such content.</p> </blockquote> <h3 id="tldr">TL;DR</h3> <ul> <li>Do not use any work that is unlicensed even if it is publicly shared online.</li> <li>Properly credit the original creator if their license requires you to do so.</li> <li>Attach a license that you think suits the goal of the project and your philosophies.</li> <li>Talk to appropriate personnel regarding this before making any decision.</li> </ul> <h2 id="citation-using-digital-object-identifier-doi">Citation using digital object identifier (DOI)</h2> <p>The second step of this process was to make the GitHub repository citable when they use it in an academic context in the future. Yes, it is possible to cite a GitHub repository directly, but hyperlinks are never permanent. At some point, it will probably break or change. This is where the concept of digital object identifier (DOI) comes in. DOI points to an archived object on the internet permanently regardless of the hyperlink and is commonly used by academic journals and preprints among others. Other than the traditional academic publications, there are a few websites that allow general users to deposit their data, code, and documentation-type works and receive a DOI against that. <a href="https://evodify.com/free-research-repository/">This blog post</a> will provide you a quick overview of services like <a href="https://datadryad.org/stash">DRYAD</a>, <a href="https://zenodo.org">Zenodo</a>, <a href="https://zenodo.org">FigShare</a>, <a href="https://data.mendeley.com">Mendeley</a>, <a href="https://osf.io">Open Science Framework</a>, etc. This blog post is about 5 years old by now, so you should carefully look into the currently available features provided by different services. Even a lot of universities provide data archival services to their students, staff, and faculties.</p> <h3 id="using-zenodo">Using Zenodo</h3> <p>Since GitHub allows direct integration with Zenodo with the versioning system, I opted in for that. Zenodo is maintained by CERN and claims to be in existence as long as CERN exists. <a href="https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content">This GitHub documentation</a> will walk you through that process. Briefly, you will need to connect your GitHub repository to your Zenodo account and then you will have to create a release from your repository which will trigger Zenodo to archive a <code class="language-plaintext highlighter-rouge">.zip</code> version of your repository and give you DOI for that release.</p> <blockquote class="block-danger"> <h5 id="caution">CAUTION</h5> <p>In this approach, once you create a release on GitHub, you will get a new DOI every single time from Zenodo. For each DOI, you can change the metadata (description, date, webpage, etc.), but you can not change the files once the DOI is generated. One other pitfall is that you do not get the DOI ahead of time to include it in the README file before creating the release.</p> </blockquote> <p>For these reasons, I eventually decided I would turn off GiHub-Zenodo integration and manually create a DOI from Zenodo. My workflow on Zenodo is that I start a <strong>New Upload</strong> process and reserve a DOI immediately. Once the DOI is available, I include that DOI in the README file and other documentation of my project. Following that, I fill out other metadata (Title, Resource type, Creators, License, Web page, Resource type, etc.), upload the zip files, and check the project from the <strong>Preview</strong>. You can edit and delete the record in draft mode. Once everything looks good to me, I publish the record. While the files can not be changed, metadata associated with the project can be updated later while keeping the DOI. Once a record is published, it is somewhat difficult to remove it. Zenodo gives a month-long grace period for users to request record deletion but some services do not provide that. So publish the record carefully.</p> <p>Similar to the GitHub release feature, Zenodo allows a versioning system for the work and will create a new DOI every time a new version of the files is uploaded. But Zenodo also provides <strong>all version DOI</strong> which will always redirect to the latest version of the record. If you release more than one version of the records, you can include the <strong>all version DOI</strong> in the README file or documentation of the second version and later. When you upload a new version on Zonedo, try following <a href="https://semver.org">semantic versioning</a> for your record or release. In this approach, X.Y.Z numeric formats are used to represent a version that you may have seen before for different software or packages. Briefly,</p> <ul> <li>X is for major releases when incompatibility between the previous and new releases happens</li> <li>Y is for minor release when new functionalities are added to the previous release in a backward compatible manner</li> <li>Z is for compatible bug fixes</li> </ul> <p>This was my quick attempt to go over some really complicated issues that are not well-understood and discussed among students within academic settings especially those who develop programs or software or documentation. In my opinion, these issues are a deep rabbit hole once you get into it. So, be sure to discuss with appropriate personnel to avoid any sort of aftermath.</p> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>If you are a part of an institution, you should definitely discuss this with your manager or advisor and technology transfer office before you apply any license to your work or relicense it later. You should also check with your institution about archival services and obtaining DOI.</p> </blockquote>]]></content><author><name></name></author><category term="resources"/><category term="licensing"/><category term="open-source"/><category term="DOI"/><category term="Zenodo"/><category term="GitHub"/><summary type="html"><![CDATA[Some common resources to understand licensing and citing online contents]]></summary></entry><entry><title type="html">Getting started with FEniCSx</title><link href="https://bibekanandadatta.com/blog/2023/getting-started-with-fenicsx/" rel="alternate" type="text/html" title="Getting started with FEniCSx"/><published>2023-04-20T15:59:00+00:00</published><updated>2023-04-20T15:59:00+00:00</updated><id>https://bibekanandadatta.com/blog/2023/getting-started-with-fenicsx</id><content type="html" xml:base="https://bibekanandadatta.com/blog/2023/getting-started-with-fenicsx/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">FEniCSx</code> is an open-source multi-platform computing environment to solve partial differential equations using the finite element method. <code class="language-plaintext highlighter-rouge">FEniCSx</code> supports parallel computing with Python and C++ interfaces. <code class="language-plaintext highlighter-rouge">FEniCSx</code> is comprised of the libraries UFL, Basix, FFCx, and DOLFINx which are the build blocks of it.</p> <p>The project originally started in 2003 and was known as <code class="language-plaintext highlighter-rouge">FEniCS</code>. In 2020, the developers released a new version of the library which they renamed <code class="language-plaintext highlighter-rouge">FEniCSx</code>. The latest stable version of legacy <code class="language-plaintext highlighter-rouge">FEniCS</code> was released in April 2019 and it’s barely updated. But many tutorials and legacy codes are perhaps written in legacy <code class="language-plaintext highlighter-rouge">FEniCS</code>. So you may want to install a version of it. I will demonstrate installing both versions on multiple different platforms here.</p> <p>Both <code class="language-plaintext highlighter-rouge">FEniCSx</code> and <code class="language-plaintext highlighter-rouge">FEniCS</code> are available on Linux, macOS, and Windows. You can download and install it in different ways. Check out the <a href="https://github.com/FEniCS/dolfinx">options here for FEniCSx</a> and <a href="https://fenicsproject.org/download/archive/">legacy FEniCS</a>. For both versions, my preferred approach is to install them via Anaconda.</p> <h2 id="installation-on-windows">Installation on Windows</h2> <p>This step in only applicable if you are using Windows. You will have to set up Windows Subsystem for Linux (WSL) to use Anaconda-based installation of <code class="language-plaintext highlighter-rouge">FEniCSx</code> and legacy <code class="language-plaintext highlighter-rouge">FEniCS</code>. WSL is a virtual Linux environment within Windows that allows you to use Linux command line tools and GUI applications. If you are on macOS or Linux, you can skip this step. If you are on Windows and already have installed WSL, it still might be interesting to download the recommended applications/ tools, such as VS Code.</p> <h2 id="get-your-tools-ready-first">Get your tools ready first</h2> <p><em>It’s best to have your tools with you. If you don’t, you’re apt to find something you didn’t expect and get discouraged.</em> – Stephen King.</p> <h3 id="powershell-7">PowerShell 7</h3> <p>Microsoft Windows already comes with Windows PowerShell 5.1, but the modern edition of PowerShell 7 is more powerful and available on different operating systems. To learn more, <a href="https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows">check this</a>.</p> <ol> <li> <p>Install the App Installer from the Microsoft App Store. This will enable the <code class="language-plaintext highlighter-rouge">winget</code> tool on the default PowerShell 5.1 and new PowerShell 7.X.Y to be installed.</p> </li> <li> <p>Open the default Windows PowerShell 5.1 as <strong>administrator</strong> from the Windows Start menu, then do the following:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>winget search Microsoft.PowerShell
</code></pre></div> </div> <p>This command will return the available PowerShell versions to install. I do not recommend installing the <code class="language-plaintext highlighter-rouge">.preview</code> version.</p> </li> <li> <p>Now install the stable release of PowerShell using the following command:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> winget install --id Microsoft.Powershell --source winget
</code></pre></div> </div> </li> </ol> <h3 id="windows-terminal">Windows Terminal</h3> <p>Windows Terminal is a command line tool, available on <a href="https://apps.microsoft.com/store/apps">Microsoft Store</a>. Install it from there. You can manage multiple command line environments such as Windows PowerShell 5.1, PowerShell 7.X.Y, CMD, WSL, etc. using a single application.</p> <h3 id="visual-studio-code">Visual Studio Code</h3> <p>Visual Studio Code is a cross-platform code editor from Microsoft. You can install different extensions within VS Code to enable features for code development such as remote SSH, debugging, compiling, etc.</p> <ol> <li> <p>Download VS Code <a href="https://code.visualstudio.com/download">from here</a> for your operating system. Follow graphical instructions for installation.</p> </li> <li> <p>If you want to open an empty file in your current working directory using VS Code, then type:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>code .
</code></pre></div> </div> </li> <li> <p>To open a file using VS Code from the terminal, go to the directory from the terminal and type:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>code filename.ext
</code></pre></div> </div> </li> <li> <p>Once installed, add the extension packs for Python, Remote Development, and Jupyter, from Microsoft. These packages will be necessary for smooth operation.</p> </li> </ol> <h3 id="windows-subsystem-for-linux-wsl">Windows Subsystem for Linux (WSL)</h3> <ol> <li> <p>The current stable version for Windows Subsystem for Linux is WSL2 and this is the default installation. Open PowerShell 7.X.Y (your current installation version) as <strong>administrator</strong> using the Terminal app from the Windows Start menu and then type the following command:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> wsl --list --online
</code></pre></div> </div> <p>This command will show you currently available Linux distributions on Windows.</p> </li> <li> <p>Install the latest LTS version of Ubuntu which is Ubuntu 22.04.02 LTS:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wsl --install -d Ubuntu
</code></pre></div> </div> <p>It will ask you to create a user account and set a password. The installation process is fast and straightforward.</p> </li> <li> <p>Once Ubuntu in WSL is installed, you can use it similarly to a regular Ubuntu distribution. To run Ubuntu, open it from the Terminal application option. If this is your first time using Linux, you can familiarize yourself with <a href="https://ubuntu.com/tutorials/command-line-for-beginners">some commands and operations from here</a>.</p> </li> <li> <p>Now update the Ubuntu distribution and install two packages for WSL virtual display settings.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update &amp;&amp; upgrade
sudo apt install xvfb libgl1-mesa-glx
</code></pre></div> </div> <p>The first command will ask for your password. Proceed as needed.</p> </li> <li> <p>To open Windows like <code class="language-plaintext highlighter-rouge">File Explorer</code> from Ubuntu, type:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>explorer.exe .
</code></pre></div> </div> <p>You can open the WSL home directory and browse, copy, and move files like Windows.</p> </li> <li> <p>Once you have installed Ubuntu in WSL and VS Code, you can follow these tutorials to get yourself more familiarized with the VS Code environments and capabilities in WSL from these resources: <a href="https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode">https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode</a> and <a href="https://code.visualstudio.com/docs/remote/wsl-tutorial">https://code.visualstudio.com/docs/remote/wsl-tutorial</a>.</p> </li> <li> <p>To use packages and libraries installed in WSL, start VS Code from the Ubuntu terminal.</p> </li> </ol> <h2 id="anaconda-on-linux-wsl-and-macos">Anaconda on Linux (WSL) and macOS</h2> <p>If this is the first time you are using Python, then sit back, it is going to get confusing like this <a href="https://xkcd.com/1987/">xkcd comic</a>. Even if you are experienced in Python, you might find this interesting.</p> <p>Most of the Python-based libraries and packages often depend on other libraries and packages (called dependencies). Installing the right version of those packages and maintaining them is often a complex task even for experienced developers. So, I will use a popular Python distribution, Anaconda, to manage all the Python-based libraries and relevant dependencies. Anaconda uses the <code class="language-plaintext highlighter-rouge">conda</code> package manager and works well with <code class="language-plaintext highlighter-rouge">pip</code> (Python’s default package manager). Installation of Anaconda comes with popular Python packages such as NumPy, SciPy, Matplotlib, and <em>&lt;insert hundred other packages here&gt;</em>. It also comes with Jupyter Notebook and Spyder IDE. Anaconda also has a minimalist version, called Miniconda, which is lightweight because it only includes the <code class="language-plaintext highlighter-rouge">conda</code> manager and a few packages. I strongly recommend installing Anaconda instead of Miniconda.</p> <ol> <li> <p>This step is only for macOS. Install <code class="language-plaintext highlighter-rouge">xcode</code> command line tools to obtain basic development libraries and features. On the macOS terminal, type:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xcode-select --install
</code></pre></div> </div> </li> <li> <p>Download Anaconda <a href="https://www.anaconda.com/products/distribution">from here</a> based on your operating system and architecture..</p> </li> <li> <p>On macOS, you can download the graphical installer and install it like every other software by following the on-screen instructions. Alternatively, you can download the installation script and use the command line to install Anaconda like Linux. Details of the installation procedure are <a href="https://docs.anaconda.com/anaconda/install/mac-os/">available here</a>.</p> </li> <li> <p>For WSL, download the installation script. Open the Ubuntu terminal and use the following command to download the script to the WSL home directory:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh
</code></pre></div> </div> <p><code class="language-plaintext highlighter-rouge">Anaconda3-2023.03-Linux-x86_64</code> is the latest version of Anaconda for Linux available at the time this is being written. Check for the <a href="https://repo.anaconda.com/archive/">versions here</a>. Replace it with the current stable version for download and installation.</p> </li> <li> <p>Once it is copied in the home directory, you can run the following command on the Ubuntu terminal for installation:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash Anaconda3-2023.03-Linux-x86_64
</code></pre></div> </div> <p>It will ask you to read the license agreement and your permission for installation. Proceed as needed.</p> </li> <li> <p>Close the Ubuntu terminal and open it back, you will see the base environment for Anaconda is now available. This is how your terminal is going to look like:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(base) $ 
</code></pre></div> </div> </li> <li> <p>Check out these operations and <a href="https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf">commands for using Conda</a>.</p> </li> </ol> <h2 id="fenicsxon-linux-and-macos">FEniCSx on Linux and macOS</h2> <ol> <li> <p>Once Anaconda is properly installed, create an environment for <code class="language-plaintext highlighter-rouge">FEniCSx</code>. In addition to the <code class="language-plaintext highlighter-rouge">dolfinx</code> library, I will install <code class="language-plaintext highlighter-rouge">mpich</code>, <code class="language-plaintext highlighter-rouge">pyvista</code>, <code class="language-plaintext highlighter-rouge">cycler</code>, and <code class="language-plaintext highlighter-rouge">matplotlib</code>. <code class="language-plaintext highlighter-rouge">mpich</code> allows parallel processing of different operations within<code class="language-plaintext highlighter-rouge">FEniCSx</code> and the other three packages are used for quick visualization. Standard installation of Anaconda already comes with these three packages but I will still need to install them inside the <code class="language-plaintext highlighter-rouge">FEniCSx</code> environment.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(base)    $ conda create -n fenicsx
(base)    $ conda activate fenicsx
(fenicsx) $ conda install -c conda-forge fenics-dolfinx mpich pyvista matplotlib cycler
</code></pre></div> </div> <p><code class="language-plaintext highlighter-rouge">pyvista</code> supports plotting higher-order unstructured mesh in Jupyter Notebook environments. <code class="language-plaintext highlighter-rouge">matplotlib</code> lacks support for higher-order unstructured mesh. So, it is recommended to use <code class="language-plaintext highlighter-rouge">pyvista</code> for quick visualization. But you can still use <code class="language-plaintext highlighter-rouge">matplotlib</code> for regular plotting.</p> </li> <li> <p>To uninstall <code class="language-plaintext highlighter-rouge">FEniCSx</code> packages from Anaconda, you will have to uninstall everything within the environment. Before you proceed to uninstall check if the <code class="language-plaintext highlighter-rouge">FEniCSx</code> environment is active in the terminal. If it is active, then deactivate it first and proceed to uninstall the packages.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(fenicsx) $ conda deactivate
(base)    $ conda remove -n fenicsx --all
(base)    $ conda clean --all
</code></pre></div> </div> <p>It will ask your permission; proceed as needed. <code class="language-plaintext highlighter-rouge">FEniCSx</code> should be completely uninstalled now.</p> </li> </ol> <h2 id="legacy-fenicson-linux-and-macos-optional">Legacy FEniCS on Linux and macOS (optional)</h2> <p>A lot of the tutorials, examples, and published codes are still written in legacy <code class="language-plaintext highlighter-rouge">FEniCS</code>. So, you may want to install the legacy version in case you want to run codes written in legacy <code class="language-plaintext highlighter-rouge">FEniCS</code>.</p> <ol> <li> <p>The installation process is similar to <code class="language-plaintext highlighter-rouge">FEniCSx</code>. Since higher order mesh wasn’t a feature for legacy <code class="language-plaintext highlighter-rouge">FEniCS</code>, I am skipping the installation of <code class="language-plaintext highlighter-rouge">pyvista</code> here. Necessary visualization can be done using <code class="language-plaintext highlighter-rouge">matplotlib</code>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(base)   $ conda create -n fenics
(base)   $ conda activate fenics
(fenics) $ conda install -c conda-forge fenics matplotlib cycler
</code></pre></div> </div> </li> <li> <p>Uninstallation procedure for legacy <code class="language-plaintext highlighter-rouge">FEniCS</code> is also similar to the <code class="language-plaintext highlighter-rouge">FEniCSx</code> package.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(fenics) $ conda deactivate
(base)   $ conda remove -n fenics --all
(base)   $ conda clean --all
</code></pre></div> </div> </li> </ol> <h2 id="an-alternative-way-to-install-on-ubuntu-not-recommended">An alternative way to install on Ubuntu (not recommended)</h2> <ol> <li> <p>On Ubuntu, you can also install <code class="language-plaintext highlighter-rouge">FEniCSx</code> using the <code class="language-plaintext highlighter-rouge">apt</code> package manager. Albeit the installation process is simple and lightweight, the <code class="language-plaintext highlighter-rouge">FEniCSx</code> version available via <code class="language-plaintext highlighter-rouge">apt</code> is often not the latest version. So, I do not recommend installing this way.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo add-apt-repository ppa:fenics-packages/fenics
sudo apt update
sudo apt install fenicsx
</code></pre></div> </div> </li> <li> <p>To uninstall <code class="language-plaintext highlighter-rouge">FEniCSx</code> using <code class="language-plaintext highlighter-rouge">apt</code> on Ubuntu, follow the procedures below:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt remove fenicsx
sudo apt remove --auto-remove fenicsx
sudo apt purge fenicsx
sudo apt purge --auto-remove fenicsx
</code></pre></div> </div> </li> <li> <p>Legacy <code class="language-plaintext highlighter-rouge">FEniCS</code> can be installed using this approach as well. Please make sure to use <code class="language-plaintext highlighter-rouge">fenics</code> instead of <code class="language-plaintext highlighter-rouge">fenicsx</code> in the command line for installing and uninstalling legacy <code class="language-plaintext highlighter-rouge">FEniCS</code>.</p> </li> </ol> <h3 id="test-your-fenicsxinstallation">Test your FEniCSx installation</h3> <ol> <li> <p>Now we will run a simple <code class="language-plaintext highlighter-rouge">FEniCSx</code> example code to test the installation. If you open the Ubuntu or macOS terminal now, you will see the <code class="language-plaintext highlighter-rouge">(base)</code> environment is active. So, you have to activate the <code class="language-plaintext highlighter-rouge">(fenicsx)</code> environment before running the code.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(base) $ conda activate fenicsx
</code></pre></div> </div> <p>Now you should see:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(fenicsx) $ 
</code></pre></div> </div> <p>In case you close your terminal and reopen it, you will see the <code class="language-plaintext highlighter-rouge">(base)</code> environment is active by default. You will have to activate <code class="language-plaintext highlighter-rouge">(fenicsx)</code> environment using the above command.</p> </li> <li> <p>Create a directory called <code class="language-plaintext highlighter-rouge">fenicsx-code</code> in our WSL home directory and navigate to it:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(fenicsx) $ mkdir fenicsx-code
(fenicsx) $ cd fenicsx-code
</code></pre></div> </div> </li> <li> <p>Copy the following Python code and save it as <code class="language-plaintext highlighter-rouge">poisson.py</code> using VS Code in the above directory. This code solves a simple 2D Poisson problem. Technical details of this code is <a href="https://jsdokken.com/dolfinx-tutorial/chapter1/fundamentals">described here</a>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">import</span> <span class="n">os</span>
 <span class="kn">import</span> <span class="n">numpy</span>
 <span class="kn">import</span> <span class="n">ufl</span>
 <span class="kn">import</span> <span class="n">dolfinx</span>
 <span class="kn">from</span> <span class="n">dolfinx</span> <span class="kn">import</span> <span class="n">mesh</span><span class="p">,</span> <span class="n">fem</span><span class="p">,</span> <span class="n">io</span><span class="p">,</span> <span class="n">plot</span> 
 <span class="kn">from</span> <span class="n">mpi4py</span> <span class="kn">import</span> <span class="n">MPI</span>
 <span class="kn">from</span> <span class="n">petsc4py</span> <span class="kn">import</span> <span class="n">PETSc</span>
 <span class="kn">import</span> <span class="n">pyvista</span> <span class="k">as</span> <span class="n">pv</span>

 <span class="c1"># clears the terminal and prints dolfinx version
</span> <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="sh">'</span><span class="s">clear</span><span class="sh">'</span><span class="p">)</span>
 <span class="c1"># prints dolfinx version
</span> <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">DOLFINx version: </span><span class="si">{</span><span class="n">dolfinx</span><span class="p">.</span><span class="n">__version__</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

 <span class="c1"># no of elements in each direction
</span> <span class="n">NElem</span>   <span class="o">=</span> <span class="mi">8</span>

 <span class="c1"># create a unit square with 8x8 elements with quad elements and use first order shape function
</span> <span class="n">domain</span>  <span class="o">=</span> <span class="n">mesh</span><span class="p">.</span><span class="nf">create_unit_square</span><span class="p">(</span><span class="n">MPI</span><span class="p">.</span><span class="n">COMM_WORLD</span><span class="p">,</span><span class="n">NElem</span><span class="p">,</span><span class="n">NElem</span><span class="p">,</span><span class="n">mesh</span><span class="p">.</span><span class="n">CellType</span><span class="p">.</span><span class="n">quadrilateral</span><span class="p">)</span>
 <span class="n">V</span>       <span class="o">=</span> <span class="n">fem</span><span class="p">.</span><span class="nc">FunctionSpace</span><span class="p">(</span><span class="n">domain</span><span class="p">,(</span><span class="sh">"</span><span class="s">CG</span><span class="sh">"</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>

 <span class="c1">## define trial and test functions
</span> <span class="n">u</span>       <span class="o">=</span> <span class="n">ufl</span><span class="p">.</span><span class="nc">TrialFunction</span><span class="p">(</span><span class="n">V</span><span class="p">)</span>
 <span class="n">v</span>       <span class="o">=</span> <span class="n">ufl</span><span class="p">.</span><span class="nc">TestFunction</span><span class="p">(</span><span class="n">V</span><span class="p">)</span>

 <span class="c1"># source term of the poisson equation
</span> <span class="n">f</span>       <span class="o">=</span> <span class="n">fem</span><span class="p">.</span><span class="nc">Constant</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">PETSc</span><span class="p">.</span><span class="nc">ScalarType</span><span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="p">))</span>

 <span class="c1">## applying boundary conditions
</span> <span class="n">uD</span>      <span class="o">=</span> <span class="n">fem</span><span class="p">.</span><span class="nc">Function</span><span class="p">(</span><span class="n">V</span><span class="p">)</span>
 <span class="n">uD</span><span class="p">.</span><span class="nf">interpolate</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
 <span class="n">tdim</span>    <span class="o">=</span> <span class="n">domain</span><span class="p">.</span><span class="n">topology</span><span class="p">.</span><span class="n">dim</span>
 <span class="n">fdim</span>    <span class="o">=</span> <span class="n">tdim</span> <span class="o">-</span> <span class="mi">1</span>
 <span class="n">domain</span><span class="p">.</span><span class="n">topology</span><span class="p">.</span><span class="nf">create_connectivity</span><span class="p">(</span><span class="n">fdim</span><span class="p">,</span> <span class="n">tdim</span><span class="p">)</span>
 <span class="n">boundary_facets</span> <span class="o">=</span> <span class="n">mesh</span><span class="p">.</span><span class="nf">exterior_facet_indices</span><span class="p">(</span><span class="n">domain</span><span class="p">.</span><span class="n">topology</span><span class="p">)</span>
 <span class="n">boundary_dofs</span>   <span class="o">=</span> <span class="n">fem</span><span class="p">.</span><span class="nf">locate_dofs_topological</span><span class="p">(</span><span class="n">V</span><span class="p">,</span> <span class="n">fdim</span><span class="p">,</span> <span class="n">boundary_facets</span><span class="p">)</span>
 <span class="n">bc</span>      <span class="o">=</span> <span class="n">fem</span><span class="p">.</span><span class="nf">dirichletbc</span><span class="p">(</span><span class="n">uD</span><span class="p">,</span> <span class="n">boundary_dofs</span><span class="p">)</span>

 <span class="c1"># bilinear form
</span> <span class="n">a</span>       <span class="o">=</span> <span class="n">ufl</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">ufl</span><span class="p">.</span><span class="nf">grad</span><span class="p">(</span><span class="n">u</span><span class="p">),</span> <span class="n">ufl</span><span class="p">.</span><span class="nf">grad</span><span class="p">(</span><span class="n">v</span><span class="p">))</span> <span class="o">*</span> <span class="n">ufl</span><span class="p">.</span><span class="n">dx</span>
 <span class="n">L</span>       <span class="o">=</span> <span class="n">f</span> <span class="o">*</span> <span class="n">v</span> <span class="o">*</span> <span class="n">ufl</span><span class="p">.</span><span class="n">dx</span>

 <span class="c1"># set PETSc solver options
</span> <span class="n">sol_opts</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">ksp_type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">preonly</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pc_type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">lu</span><span class="sh">"</span><span class="p">}</span>
 <span class="c1"># formulate the problem
</span> <span class="n">problem</span> <span class="o">=</span> <span class="n">fem</span><span class="p">.</span><span class="n">petsc</span><span class="p">.</span><span class="nc">LinearProblem</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="n">bcs</span><span class="o">=</span><span class="p">[</span><span class="n">bc</span><span class="p">],</span> <span class="n">petsc_options</span><span class="o">=</span><span class="n">sol_opts</span><span class="p">)</span>
 <span class="c1"># solve the problem
</span> <span class="n">uh</span> <span class="o">=</span> <span class="n">problem</span><span class="p">.</span><span class="nf">solve</span><span class="p">()</span>

 <span class="c1">## error calculation
</span> <span class="n">V2</span>          <span class="o">=</span> <span class="n">fem</span><span class="p">.</span><span class="nc">FunctionSpace</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="p">(</span><span class="sh">"</span><span class="s">CG</span><span class="sh">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
 <span class="n">uex</span>         <span class="o">=</span> <span class="n">fem</span><span class="p">.</span><span class="nc">Function</span><span class="p">(</span><span class="n">V2</span><span class="p">)</span>
 <span class="n">uex</span><span class="p">.</span><span class="nf">interpolate</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>

 <span class="n">L2_error</span>    <span class="o">=</span> <span class="n">fem</span><span class="p">.</span><span class="nf">form</span><span class="p">(</span><span class="n">ufl</span><span class="p">.</span><span class="nf">inner</span><span class="p">(</span><span class="n">uh</span> <span class="o">-</span> <span class="n">uex</span><span class="p">,</span> <span class="n">uh</span> <span class="o">-</span> <span class="n">uex</span><span class="p">)</span> <span class="o">*</span> <span class="n">ufl</span><span class="p">.</span><span class="n">dx</span><span class="p">)</span>
 <span class="n">error_local</span> <span class="o">=</span> <span class="n">fem</span><span class="p">.</span><span class="nf">assemble_scalar</span><span class="p">(</span><span class="n">L2_error</span><span class="p">)</span>
 <span class="n">error_L2</span>    <span class="o">=</span> <span class="n">numpy</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">domain</span><span class="p">.</span><span class="n">comm</span><span class="p">.</span><span class="nf">allreduce</span><span class="p">(</span><span class="n">error_local</span><span class="p">,</span> <span class="n">op</span><span class="o">=</span><span class="n">MPI</span><span class="p">.</span><span class="n">SUM</span><span class="p">))</span>

 <span class="n">error_max</span>   <span class="o">=</span> <span class="n">numpy</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="n">numpy</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">uD</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">array</span><span class="o">-</span><span class="n">uh</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">array</span><span class="p">))</span>

 <span class="c1"># print the error
</span> <span class="k">if</span> <span class="n">domain</span><span class="p">.</span><span class="n">comm</span><span class="p">.</span><span class="n">rank</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
     <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error_L2 : </span><span class="si">{</span><span class="n">error_L2</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
     <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error_max : </span><span class="si">{</span><span class="n">error_max</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

 <span class="c1"># writing output files in xdmf format
</span> <span class="k">with</span> <span class="n">io</span><span class="p">.</span><span class="nc">XDMFFile</span><span class="p">(</span><span class="n">domain</span><span class="p">.</span><span class="n">comm</span><span class="p">,</span> <span class="sh">"</span><span class="s">output.xdmf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">xdmf</span><span class="p">:</span>
     <span class="n">xdmf</span><span class="p">.</span><span class="nf">write_mesh</span><span class="p">(</span><span class="n">domain</span><span class="p">)</span>
     <span class="n">xdmf</span><span class="p">.</span><span class="nf">write_function</span><span class="p">(</span><span class="n">uh</span><span class="p">)</span>

 <span class="c1"># 2D contour plots of the mesh and result using pyvista
</span> <span class="c1">#pv.start_xvfb()    # Uncomment the line on WSL
</span> <span class="n">pv</span><span class="p">.</span><span class="n">off_screen</span> <span class="o">=</span> <span class="bp">True</span>
 <span class="n">topology</span><span class="p">,</span> <span class="n">cell_types</span><span class="p">,</span> <span class="n">geometry</span> <span class="o">=</span> <span class="n">plot</span><span class="p">.</span><span class="nf">create_vtk_mesh</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">tdim</span><span class="p">)</span>
 <span class="n">grid</span> <span class="o">=</span> <span class="n">pv</span><span class="p">.</span><span class="nc">UnstructuredGrid</span><span class="p">(</span><span class="n">topology</span><span class="p">,</span> <span class="n">cell_types</span><span class="p">,</span> <span class="n">geometry</span><span class="p">)</span>

 <span class="n">plotter</span> <span class="o">=</span> <span class="n">pv</span><span class="p">.</span><span class="nc">Plotter</span><span class="p">()</span>
 <span class="n">plotter</span><span class="p">.</span><span class="nf">add_mesh</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span><span class="n">show_edges</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
 <span class="n">plotter</span><span class="p">.</span><span class="nf">view_xy</span><span class="p">()</span>
 <span class="n">plotter</span><span class="p">.</span><span class="nf">save_graphic</span><span class="p">(</span><span class="sh">'</span><span class="s">mesh.pdf</span><span class="sh">'</span><span class="p">)</span>

 <span class="n">u_topology</span><span class="p">,</span> <span class="n">u_cell_types</span><span class="p">,</span> <span class="n">u_geometry</span> <span class="o">=</span> <span class="n">plot</span><span class="p">.</span><span class="nf">create_vtk_mesh</span><span class="p">(</span><span class="n">V</span><span class="p">)</span>
 <span class="n">u_grid</span> <span class="o">=</span> <span class="n">pv</span><span class="p">.</span><span class="nc">UnstructuredGrid</span><span class="p">(</span><span class="n">u_topology</span><span class="p">,</span> <span class="n">u_cell_types</span><span class="p">,</span> <span class="n">u_geometry</span><span class="p">)</span>
 <span class="n">u_grid</span><span class="p">.</span><span class="n">point_data</span><span class="p">[</span><span class="sh">"</span><span class="s">u</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">uh</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">array</span><span class="p">.</span><span class="n">real</span>
 <span class="n">u_grid</span><span class="p">.</span><span class="nf">set_active_scalars</span><span class="p">(</span><span class="sh">"</span><span class="s">u</span><span class="sh">"</span><span class="p">)</span>
 <span class="n">u_plotter</span> <span class="o">=</span> <span class="n">pv</span><span class="p">.</span><span class="nc">Plotter</span><span class="p">()</span>
 <span class="n">u_plotter</span><span class="p">.</span><span class="nf">add_mesh</span><span class="p">(</span><span class="n">u_grid</span><span class="p">,</span><span class="n">show_edges</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
 <span class="n">u_plotter</span><span class="p">.</span><span class="nf">view_xy</span><span class="p">()</span>
 <span class="n">u_plotter</span><span class="p">.</span><span class="nf">save_graphic</span><span class="p">(</span><span class="sh">'</span><span class="s">contour.pdf</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div> </div> </li> <li> <p>Now run the Python code from the Ubuntu terminal:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(fenicsx) $ python3 poisson.py
</code></pre></div> </div> </li> <li> <p>This should save the <code class="language-plaintext highlighter-rouge">.h5</code> and <code class="language-plaintext highlighter-rouge">.xdmf</code> files with the results and save the mesh and contour plot of the primary variable <code class="language-plaintext highlighter-rouge">.pdf</code> files in the working directory.</p> </li> </ol>]]></content><author><name></name></author><category term="tutorial"/><category term="FEniCSx"/><category term="finite-element"/><category term="Python"/><category term="programming"/><category term="Anaconda"/><category term="WSL"/><summary type="html"><![CDATA[A tutorial on how to set up FEniCSx and compile your first program]]></summary></entry><entry><title type="html">LaTeX in MS PowerPoint and VS Code on macOS</title><link href="https://bibekanandadatta.com/blog/2023/latex-powerpoint-vscode-mac/" rel="alternate" type="text/html" title="LaTeX in MS PowerPoint and VS Code on macOS"/><published>2023-04-20T15:59:00+00:00</published><updated>2023-04-20T15:59:00+00:00</updated><id>https://bibekanandadatta.com/blog/2023/latex-powerpoint-vscode-mac</id><content type="html" xml:base="https://bibekanandadatta.com/blog/2023/latex-powerpoint-vscode-mac/"><![CDATA[<p>My presentations often include a fair share of math equations and videos/ animation. Although making a presentation in Beamer is always an option however as of now, embedding animation or video in a Beamer-generated PDF isn’t very intuitive or natively supported. So, I have always opted for PowerPoint because of the ease of use. While equation editor in MS Word and PowerPoint has improved drastically over the last few years, it’s still nowhere near what LaTeX can produce. Additionally, I already have equations written in LaTeX and I use Overleaf these days for LaTeX.</p> <h2 id="latexit-and-powerpoint">LaTeXiT and PowerPoint</h2> <p>After I got the 2022 M2 Macbook Air, I was looking for a way to integrate LaTeX into MS PowerPoint. Previously, I had the full LaTeX distribution installed via MacTeX and I used the IguanaTex plugin to generate the LaTeX equation within the PowerPoint. But this time around, I was reluctant to install the full MacTeX distribution as it would occupy 8 GB+ space on my SSD. MacTeX is essentially TexLive distribution specific to macOS. On Windows, the popular Tex distribution is MiKTeX. Anyway, also to use IguanaTex on Apple Silicon processors, MS PowerPoint needs to be run with the “Open with Rosetta” option. Rosetta is a software that emulates Intel x86 architecture for Apple’s ARM silicon processor, but that comes with a performance penalty. I decided not to opt in for that either.</p> <p>Considering the situations at hand, my new workflow for having LaTeX equations in the PowerPoint slides requires the installation of BasicTeX, Ghostscript, and LaTeXiT. BasicTeX is a lightweight TeX distribution (only a few hundred megabytes) of MacTeX, Ghostscript is a rendering package of PostScript and PDF, and LaTeXiT is a very lightweight equation editor. Download BasicTeX and ghostscript <a href="https://www.tug.org/mactex/morepackages.html">from here</a>. Install in this order; first BasicTeX and then Ghostscript. Both of these come as .pkg files, so the installation procedure is straightforward and no customization is necessary. Now <a href="https://www.chachatelier.fr/latexit">download and install LaTeXiT from here</a>. The installation process is trivial. Open LaTeXiT and then from the Menu bar on the top of the screen, go to Settings. Make sure your export format is “PDF Vector Output”. You can also export the equations in .png, .jpg, .tiff, .eps, and .svg format, but I found PDF to be the most compatible format which you can easily edit later by dragging and dropping to LaTeXiT.</p> <p>You can now start typing equations and if you click on the LaTeXiT icon, it will produce the beautifully crafted LaTeX formula in the preview box on the top. You can drag it to the Desktop Window and it will be saved as a PDF file. You can also directly drag it to a PowerPoint slide. It will embed there as an image. If you’d like to edit the equation later, you can drag that image to the preview window of LaTeXiT, it will generate the .tex code for you which you can edit and repeat the process of drag and embed. There are two things I should mention about this workflow:</p> <ul> <li>BasicTeX does not have all the packages you may need and manual installation of the packages might be needed. We will see how to do that.</li> <li>I would have loved it even more if LaTeXiT had a PowerPoint plug-in like IguanaTeX. I wish the developer steps forward at some point.</li> </ul> <h3 id="latexit-settings-optional">LaTeXiT Settings (optional)</h3> <p>In the typesettings tab, you can create your preamble. This is what my current preamble looks like:</p> <div class="language-latex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">\documentclass</span><span class="na">[12pt]</span><span class="p">{</span>article<span class="p">}</span>

<span class="k">\usepackage</span><span class="na">[utf8]</span><span class="p">{</span>inputenc<span class="p">}</span>

<span class="k">\usepackage</span><span class="p">{</span>amsfonts,amssymb,amsmath,amsthm,dsfont,mathtools,mathbbol,upgreek<span class="p">}</span>
<span class="k">\usepackage</span><span class="na">[usenames]</span><span class="p">{</span>color<span class="p">}</span>
<span class="k">\usepackage</span><span class="p">{</span>enumitem<span class="p">}</span>
<span class="k">\usepackage</span><span class="na">[T1]</span><span class="p">{</span>fontenc<span class="p">}</span>

<span class="k">\newcommand</span><span class="p">{</span><span class="k">\dC</span><span class="p">}{$^{</span><span class="nv">\circ</span><span class="p">}$</span>C<span class="p">}</span>
<span class="k">\DeclareMathOperator</span><span class="p">{</span><span class="k">\R</span><span class="p">}{</span><span class="k">\mathrm</span><span class="p">{</span>R<span class="p">}}</span>
<span class="k">\DeclareMathOperator</span><span class="p">{</span><span class="k">\T</span><span class="p">}</span>
<span class="k">\newcommand</span><span class="p">{</span><span class="k">\vect</span><span class="p">}</span>[1]<span class="p">{</span><span class="k">\mathbf</span><span class="p">{</span>#1<span class="p">}}</span>
<span class="k">\newcommand</span><span class="p">{</span><span class="k">\mat</span><span class="p">}</span>[1]<span class="p">{</span><span class="k">\mathrm</span><span class="p">{</span>#1<span class="p">}}</span>
<span class="k">\DeclareMathOperator</span><span class="p">{</span><span class="k">\tr</span><span class="p">}{</span>tr<span class="p">}</span>
<span class="k">\DeclareMathOperator</span><span class="p">{</span><span class="k">\sym</span><span class="p">}{</span>sym<span class="p">}</span>
<span class="k">\DeclareMathOperator</span><span class="p">{</span><span class="k">\skw</span><span class="p">}{</span>skw<span class="p">}</span>
<span class="k">\DeclareMathOperator</span><span class="p">{</span><span class="k">\divg</span><span class="p">}{</span>div<span class="p">}</span>
<span class="k">\DeclareMathOperator</span><span class="p">{</span><span class="k">\grad</span><span class="p">}{</span>grad<span class="p">}</span>
<span class="k">\DeclareMathOperator</span><span class="p">{</span><span class="k">\curl</span><span class="p">}{</span>curl<span class="p">}</span>
<span class="k">\DeclareMathOperator</span><span class="p">{</span><span class="k">\sgn</span><span class="p">}{</span>sign<span class="p">}</span>
</code></pre></div></div> <p>LaTeX packages, dsfont and mathtools, are not part of the BasicTeX distribution. So, I had to install them manually. If you’d like to see what LaTeX packages are installed in your distribution, type:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tlmgr list --only-installed
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">tlmgr</code> is the TexLive distribution manager. You can search for TexLive (tlmgr) documentation to learn more commands. To install the additional packages I have here, open the terminal and type the following:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo tlmgr install doublestroke mathtools
</code></pre></div></div> <p>The LaTeX package, <code class="language-plaintext highlighter-rouge">dsfont</code>, is distributed as doublestroke on the repository. You can follow the same procedure to install any LaTeX package that is hosted on the CTAN repository. We will see a few more examples later.</p> <h2 id="integrating-latex-with-vs-code">Integrating LaTeX with VS Code</h2> <p>Since I already installed BasicTeX, I decided to give local LaTeX compilation a shot but without using any additional software like TexShop, TexWorks, TexMaker, etc. Since I am a regular user of Overleaf, this is not a priority to me but I thought it would be nice to have the option, just in case. Visual Studio Code is my favorite text editor for a while, so I decided to check out the options to integrate LaTeX compilation to VS Code. If you haven’t used VS Code before, you should <a href="https://code.visualstudio.com">try it out</a>. VS Code is probably the most popular code/text editor now. Anyway, on my VS code, I installed the extension: LaTeX Workshop to manage LaTeX linking and compilation. Before configuring LaTeX Workshop for compilation, we need to install a few LaTeX packages: <code class="language-plaintext highlighter-rouge">chktex</code>, <code class="language-plaintext highlighter-rouge">synctex</code>, <code class="language-plaintext highlighter-rouge">latexmk</code>, <code class="language-plaintext highlighter-rouge">texcount</code>, <code class="language-plaintext highlighter-rouge">latexindent</code>. The installation process is the same as before; open the terminal app and type:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo tlmgr install chktex synctex latexmk texcount latexindent
</code></pre></div></div> <p>Now we need to get the PATH for these packages to be included in the LaTeX Workshop settings inside VS Code. To get the path for each package, on the terminal, type:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>which chktex
</code></pre></div></div> <p>This will return the path for chktex installation. You can repeat the same command for other packages as well. Now, let’s open the VS code, and from the top Menu bar, go to Code &gt; Settings &gt; Extension &gt; LaTeX Workshop. From the top search bar menu, search “latex-workshop path”. This will result in some options that require the path variable. I had to enter the path for chktex, synctex, texcount, and latexindent. By default, VS Code uses latexmk for compilation, so does not require entering the path in there. I guess, it finds automatically from the system if installed. You can also customize other options from the LaTeX workshop extension, such as cleaning additional files after compilation and choice of PDF viewer, etc. Once all the setup is done, you can now start writing in LaTeX and compile it.</p> <h2 id="final-words">Final Words</h2> <p>While this method is capable of compiling LaTeX files to PDF via pdflatex, the lack of packages in the BasicTeX installation makes it harder to compile a more realistic LaTeX file. You may have to install LaTeX packages manually. MikTeX on Windows has an on-the-fly package installation feature which is awesome, but I have not found a way to do it with MacTeX or TexLive. As of now, the apparent remedy is to install the complete MacTeX distribution. MikTeX is also now available on macOS; so installing MikTeX instead of BasicTeX might be helpful in that case.</p>]]></content><author><name></name></author><category term="tutorial"/><category term="LaTeX"/><category term="PowerPoint"/><category term="LaTeXiT"/><category term="VS-Code"/><category term="macOS"/><summary type="html"><![CDATA[A tutorial on how to use LaTeX with PowerPoint and VS Code on macOS for local compilation]]></summary></entry><entry><title type="html">Linking Intel oneAPI and Visual Studio with Abaqus</title><link href="https://bibekanandadatta.com/blog/2021/link-intel-and-vs-abaqus-2020/" rel="alternate" type="text/html" title="Linking Intel oneAPI and Visual Studio with Abaqus"/><published>2021-02-13T15:59:00+00:00</published><updated>2021-02-13T15:59:00+00:00</updated><id>https://bibekanandadatta.com/blog/2021/link-intel-and-vs-abaqus-2020</id><content type="html" xml:base="https://bibekanandadatta.com/blog/2021/link-intel-and-vs-abaqus-2020/"><![CDATA[<p>ABAQUS is one of the most popular commercial finite element programs in both academia and industry. In addition to the built-in physics and material models, ABAQUS allows its users to program new features through the user subroutine feature, typically written in Fortran or C++. The recommended compiler for ABAQUS user subroutines is Intel Fortran which is a part of the Intel oneAPI package since 2021. Additionally, on Windows OS, it requires installing Microsoft Visual Studio for linking and compilation. It always has been quite confusing to the users how to configure ABAQUS to use this feature. In this blog post, I will describe the procedures for installing the necessary package and configuring ABAQUS to avail the user subroutine feature.</p> <h2 id="installation">Installation</h2> <p>The installation process is fairly simple in this case. But there are a few small caveats here and there, you need to be careful to install the appropriate versions and click on the appropriate option(s) during installation.</p> <h3 id="software-you-will-need">Software you will need</h3> <ol> <li>Abaqus finite element solver</li> <li>Microsoft Visual Studio Community Edition</li> <li>Intel oneAPI Base Toolkit and Intel oneAPI HPC Toolkit</li> <li>Notepad or Notepad++ (or some text editor)</li> </ol> <p>For the first time, I used ABAQUS 2020, Microsoft Visual Studio 2019, and Intel oneAPI 2021 followed by different versions of these packages in the past few years. However, I will use examples and images from the first installation I did back in February 2021. If you are doing it right now, you may have different versions of these packages, however the procedure is almost identical. A few things to note before you begin installation:</p> <ol> <li>Please ensure you have the compatible version of Visual Studio and Intel oneAPI.</li> <li>Install Visual Studio and Intel oneAPI in that order. ABAQUS can be installed at any point during the process (before or after).</li> <li>You will need to save the batch files related to these software using administrator access. So launch Notepad from the Windows program menu as administrator or use Notepad++. I used Notepad++ as it directly allows me <strong>save as administrator</strong>.</li> </ol> <h3 id="abaqus">Abaqus</h3> <p>Abaqus user-defined features are only available through its academic (research) or commercial license which you should obtain from your university or workplace. The Abaqus Installation process is trivial depending on how you obtain the executables. While you going through the installation process, make sure to install <strong>Abaqus with CAA API components</strong>. ABAQUS should be installed in the <code class="language-plaintext highlighter-rouge">C:\SIMULIA</code> directory. This should install Abaqus/CAE and Abaqus/Viewer in the process.</p> <h3 id="microsoft-visual-studio">Microsoft Visual Studio</h3> <p>Intel oneAPI 2021 supports Visual Studio 2017 and Visual Studio 2019. I used the latest one, VS 2019, at that time. Community Edition of Visual Studio is available for free, so download that edition.</p> <p>Once you downloaded the installer, click on it to start the installation process. On the installation page, please select <code class="language-plaintext highlighter-rouge">Desktop development with C++</code> and keep the rest of the default. It will take a few minutes to install.</p> <blockquote> <p>If you are downloading a newer version of Microsoft Visual Studio, please make sure it is compatible with the Intel oneAPI version that you have.</p> </blockquote> <h3 id="intel-oneapi">Intel oneAPI</h3> <p>Intel oneAPI is split into two packages; Intel oneAPI Base Toolkit and Intel oneAPI HPC Toolkit. To be able to use Intel Fortran and C++ compilers, you will need both toolkits (especially for MKL libraries and parallel processing).</p> <ol> <li> <p>Once both of the packages are downloaded, first install the Intel oneAPI Base Toolkit (I chose the default installation). It will recognize the existence of Visual Studio. Please click on the appropriate version and move forward with installation. It might take about 15-20 minutes to install the Base Toolkit. The next step is to install the HPC tool kit in the same procedure. This will take a few minutes to get installed.</p> </li> <li> <p>If you have done the default installation of Intel oneAPI, its components should be located in <code class="language-plaintext highlighter-rouge">C:\Program Files (x86)\Intel\oneAPI</code>. Navigate to this directory and then navigate further to ensure the <code class="language-plaintext highlighter-rouge">ifort</code> executable is available in the following (or similar) directory. Copy the directory in a text file for later use. Intel is now moving to LLVM-based <code class="language-plaintext highlighter-rouge">ifx</code> compiler from 2024 ditching their old <code class="language-plaintext highlighter-rouge">ifort</code> compiler.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> C:\Program Files (x86)\Intel\oneAPI\compiler\2021.1.1\windows\bin\intel64
</code></pre></div> </div> </li> </ol> <h2 id="linking-intel-fortran-with-abaqus">Linking Intel Fortran with Abaqus</h2> <p>While the installation of the software packages is a cakewalk, it gets complicated at this stage. Follow one of the two methods below. I prefer <strong>Method 1</strong> because it’s easy and quick, and I was able to configure the Intel oneMKL library as well in this approach.</p> <blockquote> <p>In a few of the steps, when you make changes, you will have to save the file as administrator. Otherwise, you will not see the changes being made. Use Notepad++ to save yourself from headaches.</p> </blockquote> <h3 id="method-1-editing-abaqus-batch-file">Method 1: Editing ABAQUS batch file</h3> <ol> <li> <p>Navigate to <code class="language-plaintext highlighter-rouge">C:\Program Files (x86)\Intel\oneAPI\compiler\2021.1.1\env</code> (or a similar directory) and ensure the <code class="language-plaintext highlighter-rouge">vars.bat</code> file is available. If the directory name is different in your installation, search for the <code class="language-plaintext highlighter-rouge">vars.bat</code> file through Windows Explorer and navigate to the directory. Copy the file directory to a text file.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> C:\Program Files (x86)\Intel\oneAPI\compiler\2021.1.1\env\vars.bat
</code></pre></div> </div> </li> <li> <p>Navigate to the <code class="language-plaintext highlighter-rouge">C:\SIMULIA\Commands</code> directory and open the <code class="language-plaintext highlighter-rouge">abq2020.bat</code> (or the version you installed) file with any text editor. In the beginning of the file, add the following lines to the file and <strong>save it as administrator</strong>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> SET PATH=%PATH%; C:\Program Files (x86)\Intel\oneAPI\compiler\2021.1.1\windows\bin\intel64; call "C:\Program Files (x86)\Intel\oneAPI\compiler\2021.1.1\env\vars.bat" intel64
</code></pre></div> </div> </li> </ol> <p>As you can see, the <code class="language-plaintext highlighter-rouge">PATH</code> in the first line is the <code class="language-plaintext highlighter-rouge">PATH</code> for ifort compiler executables which was copied during installation. The second line is calling the batch file for the ifort compiler which sets the environment variables when ABAQUS is invoked.</p> <h3 id="method-2-gui-approach">Method 2: GUI Approach</h3> <ol> <li> <p>Navigate to <code class="language-plaintext highlighter-rouge">C:\Program Files (x86)\Intel\oneAPI\compiler\2021.1.1\env</code> (or a similar directory) and ensure the <code class="language-plaintext highlighter-rouge">vars.bat</code> file is available. If the directory name is different in your installation, search for the <code class="language-plaintext highlighter-rouge">vars.bat</code> file through Windows Explorer and navigate to the directory. Copy the file directory to a text file.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> C:\Program Files (x86)\Intel\oneAPI\compiler\2021.1.1\env\vars.bat
</code></pre></div> </div> </li> <li> <p>Copy the path locations with file names for both of them. From the Windows start menu, search <strong>Edit the system environment variables</strong>. Then click on <strong>Environment Variables -&gt; Path</strong> (under system variables), paste those previously copied batch file paths, and save it. You can see I already added those; 2nd and 3rd from the bottom on the rightmost image shown below.</p> <p><a href="/assets/img/abq_sys_path.png"><img src="/assets/img/abq_sys_path.png" width="800"/></a></p> </li> <li> <p>The next step is to link the Intel Fortran compiler with Abaqus shown step-by-step in the following image. Search Abaqus Command from the Windows Menu. Click on Open File Location. Then in Windows Explorer right click on Abaqus Command and click on Properties. In the shortcut tab, locate the target. Change from <code class="language-plaintext highlighter-rouge">C:\WINDOWS\system32\cmd.exe /k</code> to the following</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> "C:\Program Files (x86)\Intel\oneAPI\compiler\2021.1.1\env\vars.bat" intel64 vs2019 &amp; C:\WINDOWS\system32\cmd.exe /k
</code></pre></div> </div> <p><a href="/assets/img/abq_link.png"><img src="/assets/img/abq_link.png" width="800"/></a></p> </li> </ol> <h2 id="verify-linking-and-installation">Verify Linking and Installation</h2> <p>Open Abaqus Command (you can also do it from cmd or Powershell terminal) from the Windows menu and type <code class="language-plaintext highlighter-rouge">abaqus info=system</code>. It should show system information as follows, including the new compiler and linker information.</p> <p><a href="/assets/img/abq_sys.png"><img src="/assets/img/abq_sys.png" width="850"/></a></p> <p>To verify further, type <code class="language-plaintext highlighter-rouge">abaqus verify -user_std</code> and/ or <code class="language-plaintext highlighter-rouge">abaqus verify -user_exp</code> on the Abaqus Command window. If the installation and linking were successful, then you will see something like this:</p> <p><a href="/assets/img/abq_user_std.png"><img src="/assets/img/abq_user_std.png" width="850"/></a></p> <p><code class="language-plaintext highlighter-rouge">abaqus verify -user_std</code> is for verifying the user subroutine feature for Abaqus/ Standard (UMAT, UEL, etc.), and <code class="language-plaintext highlighter-rouge">abaqus verify -user_exp</code> is for verifying the user subroutine feature for Abaqus/ Explicit (VUMAT, VUEL, etc.). To verify all of the features of Abaqus you can type <code class="language-plaintext highlighter-rouge">abaqus verify -all</code>. Please note, this might take a while and some components might not pass depending on your license and installation.</p> <h3 id="a-bug-fix-for-abaqus-20192020">A bug fix for Abaqus 2019/2020</h3> <p>If you still have issues compiling user subroutines, one of the possible bugs could be fixed by following the approach. I experienced this issue when I installed Abaqus 2019 and 2020, they are fixed now. However, at that time, SIMULIA suggested the following to make then-new Intel oneAPI Toolkits compatible with Abaqus.</p> <p>Please navigate to the <code class="language-plaintext highlighter-rouge">C:\Program Files\Dassault Systemes\SimulationServices\V6R2020x\win_b64\SMA\site</code> directory and locate the <code class="language-plaintext highlighter-rouge">abaqus_v6.env</code> file. Open the file using a text editor, add the following line at the end of the file, and <strong>save the file as administrator</strong>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>compile_fortran += ['/names:lowercase',]
</code></pre></div></div> <h2 id="linking-intel-onemkl-library-with-abaqus">Linking Intel oneMKL Library with Abaqus</h2> <p>This is an advanced and optional feature which is very rarely used. Intel oneMKL library includes efficient math subroutines (e.g., BLAS and LAPACK) which can be included in user subroutines to perform computation. However, from time to time, I found it useful to take advantage of existing libraries to write efficient subroutines.</p> <ol> <li> <p>Navigate to <code class="language-plaintext highlighter-rouge">C:\Program Files (x86)\Intel\oneAPI\mkl\2021.1.1\env</code>, and ensure the <code class="language-plaintext highlighter-rouge">vars.bat</code> file is available for oneMKL package. This batch file is for the Intel oneMKL library. Copy the file directory as usual.</p> </li> <li> <p>Navigate to <code class="language-plaintext highlighter-rouge">C:\SIMULIA\Commands</code> and open the abq2020.bat (or corresponding version) file. Add the following line below the two lines previously added for the ifort compiler. Save the file as administrator using the same approach as above; either run Notepad as administrator from the Windows program menu or use Notepad++.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> call "C:\Program Files (x86)\Intel\oneAPI\mkl\2021.1.1\env\vars.bat" intel64
</code></pre></div> </div> </li> <li> <p>In the previous step, providing Intel oneMKL batch file location in the ABAQUS batch file will source the environment variables when ABAQUS is called to run simulations. However, to compile code with the Intel oneMKL library, you will need to do one more step. Locate to the <code class="language-plaintext highlighter-rouge">C:\SIMULIA\EstProducts\2020\win_b64\SMA\site</code> directory and open the <code class="language-plaintext highlighter-rouge">win86_64.env</code> file. Find the following line in the file and add the <code class="language-plaintext highlighter-rouge">/Qmkl:sequential</code> compiler option as shown below. The rest of the file should be the same. Save the file as <strong>administrator</strong>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> compile_fortran=['ifort','/Qmkl:sequential', ... ... ]
</code></pre></div> </div> <p>You may be able to run oneMKL library in parallel with Abaqus user subroutines by adding the <code class="language-plaintext highlighter-rouge">'/Qmkl:parallel'</code> compiler flag. However, I never tested this feature.</p> </li> </ol>]]></content><author><name></name></author><category term="tutorial"/><category term="Abaqus"/><category term="Fortran"/><category term="programming"/><category term="finite-element"/><category term="Visual-Studio"/><category term="Intel-oneAPI"/><category term="user-subroutine"/><summary type="html"><![CDATA[A tutorial on how to link Intel Fortran compiler and Microsoft Visual Studio with Abaqus]]></summary></entry><entry><title type="html">Relearning mathematics</title><link href="https://bibekanandadatta.com/blog/2021/relearning-mathematics/" rel="alternate" type="text/html" title="Relearning mathematics"/><published>2021-01-04T15:59:00+00:00</published><updated>2021-01-04T15:59:00+00:00</updated><id>https://bibekanandadatta.com/blog/2021/relearning-mathematics</id><content type="html" xml:base="https://bibekanandadatta.com/blog/2021/relearning-mathematics/"><![CDATA[<h2 id="a-little-background">A little background</h2> <p>I started to grow interest in computational mechanics when I was a sophomore in my Mechanics of Solids and Numerical Analysis class. For the next two years in my undergrad, I worked on learning and developing computational methods for linear elasticity problems. I developed a displacement potential-based finite difference method for modeling the interfaces of elastic composites. It was more of a learning experience than developing something novel. During my masters, my research focused more on materials science and less on computational mechanics. Soon I realized I like computational mechanics and developing algorithms and decided if I ever do PhD, I will work in that field. Luckily, I recently started my PhD and my research focuses on computational mechanics. However, within a few days, I started to feel I have lack of knowledge in many essential topics, especially mathematics.</p> <p>During my undergrad, I took 4 mathematics classes in my freshman and sophomore years which covered from Calculus to Partial Differential Equations, and even Complex Analysis. The organization of the topics was not very standard as I have seen in the syllabus of different US schools and also the old school way of teaching didn’t help in understanding the content. To make it worse, I can’t recall applying those methods/ techniques in any engineering class to a great extent. So I forgot most of it by the time I started my PhD and have to look up textbooks now and then. I took one recommended math class comprising Linear Algebra, Ordinary, and Partial Differential Equations. The class was fast-paced and poorly organized once again so that didn’t really clear the confusion I already had. Other graduate mathematics classes offered by my school were more theory and analysis based while I needed applied classes. So, for once and all I decided that I would brush up all the topics in an organized manner by myself as there are a lot of great books and learning resources available online. I also decided to document all these resources so that I can always go back and look up references. If it helps other people, I would feel humbled.</p> <h2 id="what-did-i-need-to-learn">What did I need to learn?</h2> <p>The first step to solving any problem is to identify the problem properly. In this case, I was lucky that I wasn’t a stranger to the topics that I needed to learn. I was comfortable with Calculus-I and Calculus-II (single and multi-variable, respectively) but still needed to brush up on selected topics. So I picked up James Stewart’s Calculus book and read some sections on multivariable calculus and took notes on them. But the main challenge was to learn Linear Algebra and ordinary and Partial Differential Equations in a way that I don’t have to look up textbooks to solve standard problems. I also wanted to master Laplace Transform, Fourier Series, and Fourier Transform, in the context of differential equations. Complex Analysis could be another addition to the list, but I kept this aside for the time being. However, I started looking up resources that cover those aforementioned topics in great detail and from an engineering or physical science perspective.</p> <blockquote> <p>A general resource for learning these subjects could be <strong>Advanced Engineering Mathematics by Erwin Kreyszig</strong>, and I highly recommend having it (any edition) in the book-shelf. There will be a few more topic-wise books recommendation later. For most classic books that you are going to use for self learning, you can buy older edition of books (new one sometimes costs fortune) on websites like <a href="https://abebooks.com">https://abebooks.com</a> or <a href="https://thriftbooks.com">https://thriftbooks.com</a>, or even on Amazon.</p> </blockquote> <hr/> <h2 id="linear-algebra">Linear Algebra</h2> <p>Most graduate-level Linear Algebra classes focus on the proof-based analysis of matrix theory. So an undergraduate-level Linear Algebra seems to be sufficient for the time being to understand the core concepts. So I picked up the following resources.</p> <h3 id="essence-of-linear-algebra-by-3blue1brown">Essence of Linear Algebra by 3Blue1Brown</h3> <p>A small video lecture series by one of my favorite math YouTubers. His presentation isn’t rigorous enough to help you understand the advanced mathematics involved in graduate coursework or research. However, his presentation will develop physical intuition of the subject before diving into advanced topics. I would suggest going over his video series before starting continuum mechanics or even differential equations.</p> <ul> <li><a href="https://youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab">YouTube playlist</a>.</li> </ul> <h3 id="mit-1806-linear-algebra-by-prof-gilbert-strang">MIT 18.06 Linear Algebra by Prof. Gilbert Strang</h3> <p>This is probably the most popular lecture series on this subject. Prof. Strang covered Linear Algebra from scratch to some advanced topics with proper examples and great insights. Homework for this class is assigned from Prof. Strang’s book, Introduction to Linear Algebra (4th edition). Solving the homework and exam questions would help understand the subject matter even better.</p> <ul> <li><a href="https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/">Course homepage</a>.</li> <li><a href="https://youtube.com/playlist?list=PLE7DDD91010BC51F8">YouTube playlist</a>.</li> </ul> <hr/> <h2 id="ordinary-differential-equations">Ordinary Differential Equations</h2> <h3 id="learn-differential-equations-by-prof-gilbert-strang-mit">Learn Differential Equations by Prof. Gilbert Strang (MIT)</h3> <p>This lecture series consists of short lectures from Prof. Strang and Dr. Cleve Moler, founder of MATLAB. Prof. Strang covers analytical solution methods for ODEs while Dr. Moler teaches MATLAB implementation (numerical techniques) to solve ODEs. This class doesn’t have any homework or exams; it’s rather a self-learning class.</p> <ul> <li><a href="https://ocw.mit.edu/resources/res-18-009-learn-differential-equations-up-close-with-gilbert-strang-and-cleve-moler-fall-2015/index.htm">Course homepage</a>.</li> <li><a href="https://youtube.com/playlist?list=PLUl4u3cNGP63oTpyxCMLKt_JmB0WtSZfG">YouTube playlist</a>.</li> </ul> <h3 id="engineering-mathematics-i-by-prof-steve-brunton-uw">Engineering Mathematics-I by Prof. Steve Brunton (UW)</h3> <p>Prof. Brunton’s teaching philosophy revolves around both learning the methods and being able to implement them in available programs. My personal learning and teaching philosophy is coherent with his which made his class lectures enjoyable. Going over the lectures in parallel with Prof. Strang and Dr. Moler’s class will make it beneficial to the greatest amount. Old homework and exams are also available on his website. </p> <ul> <li><a href="http://faculty.washington.edu/sbrunton/me564/">Course homepage</a>.</li> <li><a href="https://youtube.com/playlist?list=PLMrJAkhIeNNR2W2sPWsYxfrxcASrUt_9j">YouTube playlist</a>.</li> </ul> <h3 id="books">Books </h3> <p>The first book is a widely used textbook for Ordinary Differential Equation and has a modern presentation and explanations. The second one is a classic book on Ordinary Differential Equation and it’s cheap.</p> <ul> <li>Boyce, William, DiPrima, Richard. Elementary Differential Equations (10th edition). Wiley, 2012.</li> <li>Tenenbaum, Morris, Pollard, Harry. Ordinary Differential Equations. Dover Publications, 1985.</li> </ul> <hr/> <h2 id="partial-differential-equations">Partial Differential Equations</h2> <h3 id="fourier-analysis-by-prof-steven-brunton-uw">Fourier Analysis by Prof. Steven Brunton (UW)</h3> <p>This is my one of absolute favorite lecture series on Fourier Analysis. Starting with Fourier Analysis, Prof. Brunton dives into Fourier Transform and interesting engineering applications using both MATLAB and Python. This class has a similar pattern to Prof. Strang and Dr. Moler’s Learn Differential Equations; doesn’t have any homework and/ or exam. To appreciate the content of this class, a decent understanding of Linear Algebra and Ordinary Differential Equations is needed.</p> <ul> <li><a href="https://youtube.com/playlist?list=PLMrJAkhIeNNT_Xh3Oy0Y4LTj0Oxo8GqsC">YouTube playlist</a>.</li> </ul> <h3 id="engineering-mathematics-ii-by-prof-steve-brunton-uw">Engineering Mathematics-II by Prof. Steve Brunton (UW) </h3> <p>This is a continuation of Engineering Mathematics-I where Prof. Brunton covers PDE. As usual, his lectures are enjoyable and application-based. </p> <ul> <li><a href="http://faculty.washington.edu/sbrunton/me565/">Course homepage</a>.</li> <li><a href="https://youtube.com/playlist?list=PLMrJAkhIeNNR2W2sPWsYxfrxcASrUt_9j">YouTube playlist</a>.</li> </ul> <h3 id="books-1">Books </h3> <p>My first book on PDE was Nakhle Asmar’s. So I am a bit biased towards that book. However, Richard Haberman’s book is widely used for most PDE classes and has similar content to Asmar. I also enjoyed reading Stanley Farlow’s book.</p> <ul> <li>Farlow, Stanley. Partial Differential Equations for Scientists and Engineers. Dover Publications, 1993.</li> <li>Haberman, Richard. Applied Partial Differential Equations with Fourier Series and Boundary Value Problems (4th edition). Prentice Hall, 2003.</li> <li>Asmar, Nakhle. Partial Differential Equation with Fourier Series and Boundary Value Problems (2nd edition). Prentice Hall, 2005.</li> </ul>]]></content><author><name></name></author><category term="resources"/><category term="books"/><category term="courses"/><category term="lecture"/><category term="mathematics"/><summary type="html"><![CDATA[A collection of learning resources for applied mathematics that is useful in engineering]]></summary></entry></feed>